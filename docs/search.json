[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistical Computing",
    "section": "",
    "text": "1 R and RStudio",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R and RStudio</span>"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Statistical Computing",
    "section": "1.1 Welcome",
    "text": "1.1 Welcome\nWe have a lot to cover in this bootcamp-style course. By the end, you should be able to write acceptable assignments faster. One of the biggest time sinks in Honours statistics is the process of writing up your analyses, which is often slowed down by two major issues:\n\nPoor structure in R files and projects.\nSlowness in reading and writing R code.\n\nOur goal is to address both of these challenges. This course focuses on statistical computing, so many tasks will be statistical in nature.\n\n1.1.1 What Will We Cover by the Start of Day Two?\n\nSetting up R and RStudio.\nWorking with vectors, matrices, and data frames.\nDiscussing how to structure projects and organize files.\nInstalling Git, setting up a GitHub account, creating a local Git repository, and connecting it to RStudio.\nLearning Quarto and Markdown to write reports.\n\n\n\n1.1.2 What About Assignments?\nI won’t detail all the assignments, but before term “starts”, you will have:\n\nPeer-reviewed assessment:\n\nDate: towards the end of next week\nFormat:\n\nCollate selected practical work from the first two weeks into a Quarto project, with the code available on GitHub (Quarto and GitHub to be explained later).\nYou will each anonymously mark one other person’s work.\nWe will provide a marking rubric.\n\n\nFirst practical test:\n\nDate: 13 February, 9–11 AM.\nFormat:\n\nIn-class test, I believe open-book but no internet.\nWill center on writing R code and interpreting results.\n\n\n\n\n\n1.1.3 What is the outcome for today?\nAnswer the questions in Practical One, and place the answers into its own qmd file into a Quarto project on GitHub.\nNow, let’s get started.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R and RStudio</span>"
    ]
  },
  {
    "objectID": "index.html#resource-links",
    "href": "index.html#resource-links",
    "title": "Statistical Computing",
    "section": "1.2 Resource Links",
    "text": "1.2 Resource Links\nThis section contains key resources referenced throughout the course:\n\nDownload R: CRAN\nDownload RStudio: Posit\n\nMore links will be added as we progress.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R and RStudio</span>"
    ]
  },
  {
    "objectID": "index.html#setting-up-your-computer-for-analyses-in-r",
    "href": "index.html#setting-up-your-computer-for-analyses-in-r",
    "title": "Statistical Computing",
    "section": "1.3 Setting Up Your Computer for Analyses in R",
    "text": "1.3 Setting Up Your Computer for Analyses in R\nBefore diving into R, make sure your system is set up properly:\n\nInstall the latest version of R – Download here\nInstall RStudio (recommended IDE for R) – Download here\nOpen RStudio and you’re ready to begin.\n\n\n1.3.1 Configure RStudio Settings\nRefer to the video rstudio_settings.mp4 for a visual guide. Follow these steps to configure your RStudio settings:\n\n1.3.1.1 1. General Settings\nNavigate to Tools → Global Options → General.\n\nWorkspace subsection:\n\nUncheck Restore .RData into workspace at startup\nPrevents old objects from automatically loading when opening RStudio, ensuring a clean and reproducible environment.\nSet Save workspace to .RData on exit to Never\nThis avoids saving hidden dependencies that can make your scripts less reproducible.\n\n\n\n\n1.3.1.2 2. Code Editing Settings\nGo to Tools → Global Options → Code → Editing.\n\nEnable “Use Native Pipe Operator (|&gt;)”:\nSince you’ll be using a later version of R, this setting improves readability and reduces dependency on packages like {magrittr}.\nEnable “Soft-wrap R source files”:\nThis ensures that long lines wrap within the editor, so you don’t have to scroll horizontally even if the code line is long.\n\n\n\n1.3.1.3 3. Code Display Settings\nUnder Tools → Global Options → Code → Display:\n\nEnable “Rainbow Parentheses”:\nDisplays matching parentheses in different colors, making nested expressions easier to read and reducing errors.\n\n\n\n1.3.1.4 4. Appearance Settings\nFinally, go to Tools → Global Options → Appearance.\n\nEditor Font: Change to a monospaced font (for example, JetBrains Mono). A monospaced font ensures each character takes up the same width, improving alignment and readability.\nEditor Theme: Choose a dark theme instead of the default light theme to reduce eye strain. Good options include:\n\nCobalt (recommended)\nMonokai\nSolarized Dark\nTwilight\n\n\nThese settings help improve usability, maintainability, and comfort while coding in RStudio.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R and RStudio</span>"
    ]
  },
  {
    "objectID": "index.html#overview-of-the-rstudio-interface",
    "href": "index.html#overview-of-the-rstudio-interface",
    "title": "Statistical Computing",
    "section": "1.4 Overview of the RStudio Interface",
    "text": "1.4 Overview of the RStudio Interface\nRefer to the video rstudio_interface.mp4 for a detailed overview. RStudio is divided into four main panes:\n\n1.4.1 1. Script Editor (Top Left)\nThis is where you write and edit your scripts (files ending in .R, .Rmd, or .qmd). A script is essentially a record of instructions that R executes. Use Ctrl + Enter (Windows/Linux) or Cmd + Enter (Mac) to run code from the script; the command output will appear in the Console.\n\n\n1.4.2 2. Console and Terminal (Bottom Left)\n\nConsole:\nWhere R executes commands. You can run code from your script or type directly into the Console to test ideas.\nTerminal:\nAdjacent to the Console, this pane runs system shell commands. It shares the same working directory as R but interprets commands using your system shell (PowerShell on Windows, Bash on Linux, or Zsh/Bash on Mac).\n\n\n\n1.4.3 3. Environment and History (Top Right)\n\nEnvironment Tab:\nLists all objects (variables, data, functions) currently loaded in your R session.\nHistory Tab:\nDisplays a record of all commands you have executed.\n\n\n\n1.4.4 4. Files, Plots, Packages, and Help (Bottom Right)\n\nFiles Tab:\nShows files and folders in your current working directory.\nPlots Tab:\nDisplays any generated plots; you can zoom in, export (to PNG, PDF, JPEG, etc.), and clear old plots.\nPackages Tab:\nLists installed R packages and offers management options.\nHelp Tab:\nProvides documentation for functions and packages. You can search for help topics here or use the ?function_name command in the Console.\n\nThis interface layout makes it easy to write, test, and manage your R code.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R and RStudio</span>"
    ]
  },
  {
    "objectID": "r.html",
    "href": "r.html",
    "title": "2  Fundamental R Objects and Functions",
    "section": "",
    "text": "2.1 Getting Help\nSee the video r.mp4 for a visual explanation of this document.\nR is a powerful statistical computing language designed for efficient data analysis. It is free, open-source, and operates primarily on objects, which makes it flexible for data manipulation.\nR can be downloaded from CRAN, and RStudio, the recommended integrated development environment (IDE), can be obtained from RStudio. Once installed, open RStudio to explore its interface.\nTo view the help documentation for a function, use either the ? operator or the help() function:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#getting-help",
    "href": "r.html#getting-help",
    "title": "2  Fundamental R Objects and Functions",
    "section": "",
    "text": "?setwd     # Opens help for setwd()\nhelp(\"lm\")  # Alternative way to get help for lm()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#libraries",
    "href": "r.html#libraries",
    "title": "2  Fundamental R Objects and Functions",
    "section": "2.2 Libraries",
    "text": "2.2 Libraries\nLibraries in R provide additional functions and features. For example:\n\nSyntax: library(packageName)\nExample:\nlibrary(ggplot2)  # Loads the ggplot2 package for data visualization",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#reading-in-data",
    "href": "r.html#reading-in-data",
    "title": "2  Fundamental R Objects and Functions",
    "section": "2.3 Reading in Data",
    "text": "2.3 Reading in Data\nThere are many ways to read data into R. For example, to read data from a CSV file:\ndata &lt;- read.csv(\"data/yourfile.csv\")\nOther packages such as readr, readxl, and openxlsx offer additional methods and options for reading various data formats.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#assigning-values-to-objects",
    "href": "r.html#assigning-values-to-objects",
    "title": "2  Fundamental R Objects and Functions",
    "section": "2.4 Assigning Values to Objects",
    "text": "2.4 Assigning Values to Objects\nIn R, you assign values to objects using &lt;- (preferred) or =:\nx &lt;- 1               # Assigns the value 1 to x\nmsg &lt;- \"Hello, world!\"  # Assigns a character string to msg\nprint(x)            # Prints the value of x\nTo check an object’s type, use the class() function:\nclass(x)   # Returns \"numeric\"\nclass(msg) # Returns \"character\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#basic-computations",
    "href": "r.html#basic-computations",
    "title": "2  Fundamental R Objects and Functions",
    "section": "2.5 Basic Computations",
    "text": "2.5 Basic Computations\nR supports basic arithmetic following standard mathematical precedence:\n2 + 3 * 5      # Multiplication happens before addition\nlog(10)        # Natural logarithm of 10\n4^2            # Exponentiation: 4 squared\nsqrt(16)       # Square root of 16\nabs(-7)        # Absolute value of -7\nFor integer division and modulus operations:\n15 %/% 4  # Integer division: returns 3\n15 %% 4   # Modulus: returns 3",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#working-with-vectors",
    "href": "r.html#working-with-vectors",
    "title": "2  Fundamental R Objects and Functions",
    "section": "2.6 Working with Vectors",
    "text": "2.6 Working with Vectors\nVectors store multiple values of the same type and are a fundamental data structure in R:\nx &lt;- c(1, 3, 2, 10, 5)  # Creates a numeric vector\ny &lt;- 1:5                # Creates a sequence from 1 to 5\nMathematical operations can be applied directly to vectors:\ny + 2   # Adds 2 to each element\n2 * y   # Multiplies each element by 2\nx + y   # Adds corresponding elements of x and y\nx * y   # Multiplies corresponding elements of x and y\nx^y     # Raises each element of x to the power given in y\nTo extract specific elements from a vector:\nx[2]      # Returns the second element\nx[3:5]    # Returns elements from index 3 to 5\nx[-2]     # Returns all elements except the second one\nx[x &gt; 3]  # Returns elements greater than 3",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#working-with-character-vectors",
    "href": "r.html#working-with-character-vectors",
    "title": "2  Fundamental R Objects and Functions",
    "section": "2.7 Working with Character Vectors",
    "text": "2.7 Working with Character Vectors\nCharacter vectors store text data:\ncolours &lt;- c(\"green\", \"blue\", \"orange\", \"yellow\", \"red\")\ncolours[2]  # Returns \"blue\"\ncolours[5]  # Returns \"red\"\nNote that character vectors do not support arithmetic operations.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#matrices",
    "href": "r.html#matrices",
    "title": "2  Fundamental R Objects and Functions",
    "section": "2.8 Matrices",
    "text": "2.8 Matrices\nMatrices are two-dimensional arrays where all elements are of the same type:\nx &lt;- c(1, 3, 2, 10, 5)\ny &lt;- 1:5\n\nm1 &lt;- cbind(x, y)  # Column-binding creates a matrix\nm2 &lt;- rbind(x, y)  # Row-binding creates a matrix\nMatrix operations include:\nt(m1)       # Transposes the matrix\nm1 + m2     # Adds corresponding elements\nm1 %*% m2   # Matrix multiplication\nsolve(m1)   # Computes the inverse of a square matrix (if possible)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#lists",
    "href": "r.html#lists",
    "title": "2  Fundamental R Objects and Functions",
    "section": "2.9 Lists",
    "text": "2.9 Lists\nLists can store elements of different types, making them flexible for various data:\nmy_list &lt;- list(num = 1, vec = c(1, 2, 3), mat = matrix(1:6, nrow = 2))\nAccess elements of a list using the $ operator:\nmy_list$num  # Retrieves the numeric element\nmy_list$vec  # Retrieves the vector\nmy_list$mat  # Retrieves the matrix",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#data-frames",
    "href": "r.html#data-frames",
    "title": "2  Fundamental R Objects and Functions",
    "section": "2.10 Data Frames",
    "text": "2.10 Data Frames\nData frames store tabular data, similar to spreadsheets:\ndf &lt;- data.frame(name = c(\"Alice\", \"Bob\"), age = c(25, 30))\nExtract data from a data frame:\ndf$name           # Extracts the \"name\" column\ndf[1, ]           # Returns the first row\ndf[df$age &gt; 25, ] # Filters rows where age is greater than 25",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#working-with-file-paths",
    "href": "r.html#working-with-file-paths",
    "title": "2  Fundamental R Objects and Functions",
    "section": "2.11 Working with File Paths",
    "text": "2.11 Working with File Paths\nR provides several functions to work with file paths, allowing you to build, explore, and manipulate directories and files in a platform-independent way. Here are some common functions along with examples and explanations:\n\n2.11.1 Constructing File Paths with file.path()\n\nPurpose:\nfile.path() constructs file paths by combining directory and file names. It automatically uses the correct file separator for the operating system.\nExample:\n# Combine folder, subfolder, and file name\nfull_path &lt;- file.path(\"data\", \"raw\", \"myfile.txt\")\nprint(full_path)\nThis will produce a path like \"data/raw/myfile.txt\" on Unix-like systems or \"data\\\\raw\\\\myfile.txt\" on Windows.\n\n\n\n2.11.2 Listing Files with list.files()\n\nPurpose:\nlist.files() returns a character vector of the file names in a specified directory. It can also be used to filter files by pattern.\nExample:\n# List all files in the \"data\" directory\nfiles &lt;- list.files(path = \"data\")\nprint(files)\n\n# List only CSV files in the \"data\" directory\ncsv_files &lt;- list.files(path = \"data\", pattern = \"\\\\.csv$\")\nprint(csv_files)\nThis function is useful for dynamically accessing the contents of a directory.\n\n\n2.11.2.1 Listing Directories with list.dirs()\n\nPurpose:\nlist.dirs() provides a recursive list of directories (subdirectories included) within a specified path.\nExample:\n# List all directories within the \"data\" folder, including subdirectories\ndirectories &lt;- list.dirs(path = \"data\")\nprint(directories)\nThis function helps you understand the structure of your file system under a particular directory.\n\n\n\n2.11.2.2 Creating Directories with dir.create()\n\nPurpose:\ndir.create() is used to create new directories. When creating nested directories (sub-directories that do not yet exist), you must set the recursive argument to TRUE.\nExample:\n# Create a nested directory structure \"data/raw\"\ndir.create(path = file.path(\"data\", \"raw\"), recursive = TRUE)\nSetting recursive = TRUE ensures that if the parent directory \"data\" does not exist, it will be created along with \"raw\".\n\n\n\n2.11.2.3 Reading and Writing Text Files with readLines() and writeLines()\n\nreadLines():\n\nPurpose:\nReads text files line by line into a character vector, which is useful for processing or analyzing text.\nExample:\n# Read the content of a text file into a vector of lines\nlines &lt;- readLines(\"data/raw/myfile.txt\")\nprint(lines)\n\nwriteLines():\n\nPurpose:\nWrites a character vector to a text file, with each element being written as a separate line.\nExample:\n# Create a vector of text lines\noutput_lines &lt;- c(\"This is the first line.\", \"This is the second line.\")\n\n# Write the vector to a file called \"output.txt\"\nwriteLines(output_lines, con = \"data/output/output.txt\")\nThese functions are ideal for simple text processing, such as reading logs, configuration files, or exporting simple reports.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#writing-functions",
    "href": "r.html#writing-functions",
    "title": "2  Fundamental R Objects and Functions",
    "section": "2.12 Writing Functions",
    "text": "2.12 Writing Functions\nFunctions in R allow you to encapsulate operations and reuse code. Define a function using function():\nincrement &lt;- function(x) {\n  x + 1  # Adds 1 to the input value and returns it\n}\n\nincrement(3)  # Returns 4\nNote that functions always return the last value computed:\nincrement &lt;- function(x) {\n  x + 2\n  x + 1\n}\n\nincrement(3)  # Returns 4\nFunctions can also take multiple arguments:\nadd_numbers &lt;- function(x, y) {\n  return(x + y)\n}\n\nadd_numbers(2, 5)  # Returns 7\nA common example is a function to calculate the hypotenuse of a right triangle (you will use this daily):\nhypotenuse &lt;- function(a, b) {\n  sqrt(a^2 + b^2)  # Uses the Pythagorean theorem\n}\n\nhypotenuse(3, 4)  # Returns 5",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#basic-statistical-functions",
    "href": "r.html#basic-statistical-functions",
    "title": "2  Fundamental R Objects and Functions",
    "section": "2.13 Basic Statistical Functions",
    "text": "2.13 Basic Statistical Functions\nR includes built-in functions for summary statistics:\nmean(df$age)     # Computes the mean\nsd(df$age)       # Computes the standard deviation\nsummary(df)      # Provides a summary of the data frame\nTo create frequency tables:\ntable(df$name)  # Counts occurrences of each name",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "3  Tackling Projects in RStudio",
    "section": "",
    "text": "3.1 Using RStudio Projects\nRefer to the video projects.mp4 for an overview of working on projects. Here are some principles for keeping your work organized and reproducible.\nBenefits:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tackling Projects in RStudio</span>"
    ]
  },
  {
    "objectID": "projects.html#using-rstudio-projects",
    "href": "projects.html#using-rstudio-projects",
    "title": "3  Tackling Projects in RStudio",
    "section": "",
    "text": "Click on New Project in the top-right corner of RStudio to create an RStudio Project.\nThis creates a directory containing all the code, data, and outputs for your analysis.\nWhen you open a project, the working directory is automatically set to that project folder.\n\n\n\nConsistent relative paths: Avoids issues with absolute paths that vary across devices.\nEasier collaboration: Consistent paths make sharing scripts seamless.\nQuick access: Recently opened projects are available in the top-right dropdown menu.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tackling Projects in RStudio</span>"
    ]
  },
  {
    "objectID": "projects.html#organizing-project-files-and-directories",
    "href": "projects.html#organizing-project-files-and-directories",
    "title": "3  Tackling Projects in RStudio",
    "section": "3.2 Organizing Project Files and Directories",
    "text": "3.2 Organizing Project Files and Directories\nA well-structured project prevents clutter and helps you locate files easily. A common folder structure might include:\n\n\n\n\n\n\n\nFolder Name\nPurpose\n\n\n\n\n_raw_data/\nStores unmodified datasets\n\n\n_output/\nContains figures, reports, and final documents\n\n\n_tmp/\nHolds intermediate files not intended for sharing\n\n\n_reference/\nKeeps supplementary materials such as papers and assignment details\n\n\n\nNote: Keep scripts (e.g., .R, .Rmd, .qmd) in the main project directory to avoid issues with relative paths.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tackling Projects in RStudio</span>"
    ]
  },
  {
    "objectID": "projects.html#structuring-r-scripts-for-readability",
    "href": "projects.html#structuring-r-scripts-for-readability",
    "title": "3  Tackling Projects in RStudio",
    "section": "3.3 Structuring R Scripts for Readability",
    "text": "3.3 Structuring R Scripts for Readability\nGood script structure improves maintainability and reduces errors. Consider these guidelines:\n\nOrganize Scripts Logically\n\nBegin with a setup section (load libraries and data).\nFollow with analysis and processing steps, grouped logically.\n\nImprove Readability\n\nKeep lines at a reasonable length (even with word wrapping).\nUse informative variable names instead of generic ones like x or y.\nAvoid reusing variable names to prevent confusion.\n\nUse Section Headings\n\nSeparate your code into sections with comment dividers (e.g., # ---- Setup ----).\nRStudio recognizes these dividers and allows for code folding.\n\n\nExample of a Structured Script:\n# ============================\n# Setup\n# ============================\nlibrary(ggplot2)              # Load required packages\ndata_raw &lt;- read.csv(\"_raw_data/air_pollution.csv\")  # Load dataset\n\n# ============================\n# Data Cleaning\n# ============================\ndata_cleaned &lt;- data_raw |&gt;\n  dplyr::filter(!is.na(pm2.5)) |&gt;\n  dplyr::mutate(log_pm = log(pm2.5))\n\n# ============================\n# Visualization\n# ============================\nggplot(data_cleaned, aes(x = temperature, y = log_pm)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n# ============================\n# Model Fitting\n# ============================\nmodel &lt;- lm(log_pm ~ temperature + humidity, data = data_cleaned)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tackling Projects in RStudio</span>"
    ]
  },
  {
    "objectID": "projects.html#summary-of-best-practices",
    "href": "projects.html#summary-of-best-practices",
    "title": "3  Tackling Projects in RStudio",
    "section": "3.4 Summary of Best Practices",
    "text": "3.4 Summary of Best Practices\n\nUse RStudio Projects for consistent working directories and collaboration.\nOrganize files into clearly named directories to avoid clutter.\nStructure your R scripts with a logical order, clear variable names, and well-defined sections.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tackling Projects in RStudio</span>"
    ]
  },
  {
    "objectID": "quarto.html",
    "href": "quarto.html",
    "title": "4  Literate Programming",
    "section": "",
    "text": "4.1 What is Literate Programming?\nSee the video quarto.mp4 for a visual explanation of this document.\nLIterate programming combines code (e.g., R or Python) with text to create documents that are both readable and executable. The text itself is written in Markdown, a lightweight formatting language that allows us to structure documents with headings, bullet points, bold and italic text, and more.\nTwo key tools for literate programming in R are R Markdown and Quarto.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#what-is-r-markdown",
    "href": "quarto.html#what-is-r-markdown",
    "title": "4  Literate Programming",
    "section": "5.1 What is R Markdown?",
    "text": "5.1 What is R Markdown?\nR Markdown was the original tool for embedding code within documents. It allows users to write reports, create presentations, and generate formatted documents that include both text and code outputs.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#structure-of-an-r-markdown-file",
    "href": "quarto.html#structure-of-an-r-markdown-file",
    "title": "4  Literate Programming",
    "section": "5.2 Structure of an R Markdown File",
    "text": "5.2 Structure of an R Markdown File\nAn R Markdown file (.Rmd) consists of three main components:\n\n5.2.1 1. YAML Front Matter\nThe YAML front matter is the metadata at the top of the document. It controls the output format (e.g., HTML, PDF, Word).\nExample:\n---\ntitle: \"My Report\"\noutput: html_document\n---\nThis tells R Markdown to generate an HTML document. Other options include pdf_document and word_document.\n\n\n5.2.2 2. Code Chunks\nCode chunks are sections of executable code, enclosed by triple backticks (```) with a specified language. In our case, it will be R:\n\n\nsummary(cars)\n\n\n\nBackticks (`) are usually found next to the number 1 key on the keyboard.\nBy default, all code in chunks is executed when the document is rendered.\n\nChunk Options:\n- echo = FALSE → Hides the code but still runs it.\n- echo = TRUE → Displays both the code and its output.\n- Other options can control figure size, message display, and more.\nExample:\n\n\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\n\nThe summary will appear in the final document, but the code itself won’t be displayed.\n\n\n5.2.3 3. Markdown Formatting\nMarkdown is used for structuring text.\n\nHeadings: Use # for headings (## for subheadings, ### for deeper levels).\n\nBullet points: Use - or *.\n\nNumbered lists: Use 1., 2., etc.\n\nBold text: **bold** → bold\n\nItalic text: *italic* → italic",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#output",
    "href": "quarto.html#output",
    "title": "4  Literate Programming",
    "section": "5.3 Output",
    "text": "5.3 Output\nR Markdown can embed plots, tables, and formatted text into a document. When you include code that generates a plot, the plot will be displayed in the final output.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#what-is-quarto",
    "href": "quarto.html#what-is-quarto",
    "title": "4  Literate Programming",
    "section": "6.1 What is Quarto?",
    "text": "6.1 What is Quarto?\nQuarto is the successor to R Markdown. It is very similar but:\n- Has a different YAML front matter structure.\n- Supports more programming languages (via Jupyter).\n- Provides a more unified workflow for reports, websites, and books.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#differences-in-yaml",
    "href": "quarto.html#differences-in-yaml",
    "title": "4  Literate Programming",
    "section": "6.2 Differences in YAML",
    "text": "6.2 Differences in YAML\nInstead of specifying output: html_document like in R Markdown, Quarto uses:\n---\ntitle: \"My Report\"\nformat: html\n---\nQuarto uses format instead of output, making it more flexible.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#code-chunks-in-quarto",
    "href": "quarto.html#code-chunks-in-quarto",
    "title": "4  Literate Programming",
    "section": "6.3 Code Chunks in Quarto",
    "text": "6.3 Code Chunks in Quarto\nQuarto code chunks function similarly to R Markdown, but chunk options can be specified in a cleaner way:\n\n```{r}\n#| eval: false\nsummary(cars)\n```\n\nUsing #| option: value inside the chunk makes options easier to read and manage.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#why-use-quarto-projects",
    "href": "quarto.html#why-use-quarto-projects",
    "title": "4  Literate Programming",
    "section": "7.1 Why Use Quarto Projects?",
    "text": "7.1 Why Use Quarto Projects?\nOne limitation of R Markdown was that while you could generate individual reports (.html, .pdf, etc.), managing multiple files in a project (e.g., a website) required extra tools like bookdown.\nQuarto solves this by providing built-in support for project structures.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#defining-a-quarto-project",
    "href": "quarto.html#defining-a-quarto-project",
    "title": "4  Literate Programming",
    "section": "7.2 Defining a Quarto Project",
    "text": "7.2 Defining a Quarto Project\nA Quarto project is defined by a quarto.yml file, which specifies how multiple .qmd files should be compiled together.\nExample of a quarto.yml file for a website:\nproject:\n  type: website\n\nformat:\n  html:\n    toc: true\n    toc-depth: 3\nThis tells Quarto:\n- The project is a website. .\n- A table of contents should be generated (toc: true) for headings up to level 3 (toc-depth: 3).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#website-vs.-book",
    "href": "quarto.html#website-vs.-book",
    "title": "4  Literate Programming",
    "section": "7.3 Website vs. Book",
    "text": "7.3 Website vs. Book\n\nWebsite (type: website)\n\nOnly outputs HTML.\n\nHas a navigation bar linking different pages.\n\n\nBook (type: book)\n\nCan output HTML, PDF, or Word.\n\nUses a chapters: key to define sections.\n\n\nExample quarto.yml for a book:\nproject:\n  type: book\n\nbook:\n  chapters:\n    - index.qmd\n    - intro.qmd\n    - analysis.qmd\n\nformat:\n  pdf: \n    documentclass: book\nHere:\n- The chapters define the book structure.\n- The format section customizes the outputs.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#rendering-a-quarto-project",
    "href": "quarto.html#rendering-a-quarto-project",
    "title": "4  Literate Programming",
    "section": "7.4 Rendering a Quarto Project",
    "text": "7.4 Rendering a Quarto Project\nTo build the entire project, use the quarto R package:\ninstall.packages(\"quarto\")\nquarto::quarto_render()\n\nThis renders all files in the project according to quarto.yml.\n\nFor websites, output is saved in _site/.\n\nFor books, output is saved in _book/.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#important-notes",
    "href": "quarto.html#important-notes",
    "title": "4  Literate Programming",
    "section": "7.5 Important Notes",
    "text": "7.5 Important Notes\n\nTo start a new Quarto project, go to RStudio → New Project → Quarto Project.\n\nIf creating a website, ensure you have an index.qmd file—websites require an index.html as the main entry point.\nClicking the Knit button in RStudio will render the current .qmd file, but quarto::quarto_render() is needed for the entire project.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "git.html",
    "href": "git.html",
    "title": "5  Git and GitHub",
    "section": "",
    "text": "5.1 Prerequites\nSee the video git.mp4.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "git.html#prerequites",
    "href": "git.html#prerequites",
    "title": "5  Git and GitHub",
    "section": "",
    "text": "Create a GitHub account: GitHub.\nInstall Git: Git.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "git.html#setting-up-git",
    "href": "git.html#setting-up-git",
    "title": "5  Git and GitHub",
    "section": "5.2 Setting Up Git",
    "text": "5.2 Setting Up Git\nIn RStudio, open your project.\nThen, run the following code:\nif (!requireNamespace(\"usethis\", quietly = TRUE)) {\n  install.packages(\"usethis\")\n}\nusethis::use_git()\nWhen it asks you whether you want to commit the extra files, say yes.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "git.html#connecting-git-to-github",
    "href": "git.html#connecting-git-to-github",
    "title": "5  Git and GitHub",
    "section": "5.3 Connecting Git to GitHub",
    "text": "5.3 Connecting Git to GitHub\nRun the following code:\nusethis::create_github_token()\nName the token, set the expiry date and click on Create. Then copy the token (it looks like ghp_akerjlwk4j5qlk45j).\nThen, run the following code:\ngitcreds::gitcreds_set()\nand paste your token.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "git.html#further-resources",
    "href": "git.html#further-resources",
    "title": "5  Git and GitHub",
    "section": "5.4 Further resources",
    "text": "5.4 Further resources\n\nHappy Git with R:\n\nSet up guidance:\n\nWhy Git? Why GitHub?\nRegister a GitHub account\nInstall Git\nIntroduce Yourself to Git\nPersonal Access tokens for HTTPS\n\nDescription of how Git works and how to use it:\n\nSome Git Basics, and then the next few sections",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "projrsimple.html",
    "href": "projrsimple.html",
    "title": "6  projrsimple",
    "section": "",
    "text": "6.1 Installation\nI’ve written a simple package to help you:\nThere are only two functions in this package:\nWhat problems does it help solve?\nYou can install the package from GitHub using the following code:",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>`projrsimple`</span>"
    ]
  },
  {
    "objectID": "projrsimple.html#installation",
    "href": "projrsimple.html#installation",
    "title": "6  projrsimple",
    "section": "",
    "text": "if (!requireNamespace(\"remotes\", quietly = TRUE)) {\n  install.packages(\"remotes\")\n}\nremotes::install_github(\"MiguelRodo/projrsimple\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>`projrsimple`</span>"
    ]
  },
  {
    "objectID": "projrsimple.html#usage",
    "href": "projrsimple.html#usage",
    "title": "6  projrsimple",
    "section": "6.2 Usage",
    "text": "6.2 Usage\nSee the package website for more information: projrsimple.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>`projrsimple`</span>"
    ]
  },
  {
    "objectID": "prac1.html",
    "href": "prac1.html",
    "title": "7  Practical One",
    "section": "",
    "text": "NOTE: the answers to the questions below should be placed into their own qmd file in a Quarto project on GitHub. This Quarto project (the rendered document itself, as well as the source code on GitHub) will be peer-assessed next week.\n\nFind all rows in “airquality” that have missing values. Note that the airquality dataset in R is always available (just type airquality in the console to see it).\nFind mean, sd, min, max for each of temperature and ozone level.\nFor linear regression, parameter estimates can be found as follows. \\(\\hat{\\beta} = (X^TX)^{-1}X^TY\\) Here, Y is the response variable, and X is the design matrix. The cars data (an R data set, also always available in R) contains two variables: speed and distance to stop. Fit a simple linear regression model to these data, i.e. find the \\(\\beta\\) estimates, using the equation above, and matrix calcuations in R.\nCheck that you get the same \\(\\beta\\) estimates as when fitting the linear regression model using lm() in R.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Practical One</span>"
    ]
  }
]