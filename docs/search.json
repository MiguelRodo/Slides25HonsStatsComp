[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistical Computing",
    "section": "",
    "text": "Welcome\nWe have a lot to cover in this bootcamp-style course. By the end, you should be able to write acceptable assignments faster. One of the biggest time sinks in Honours statistics is the process of writing up your analyses, which is often slowed down by two major issues:\nOur goal is to address both of these challenges. This course focuses on statistical computing, so many tasks will be statistical in nature.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#what-about-assignments",
    "href": "index.html#what-about-assignments",
    "title": "Statistical Computing",
    "section": "What About Assignments?",
    "text": "What About Assignments?\nI won’t detail all the assignments, but before term “starts”, you will have:\n\nPeer-reviewed assessment:\n\nDate: towards the end of next week\nFormat:\n\nCollate selected practical work from the first two weeks into a Quarto project, with the code available on GitHub (Quarto and GitHub to be explained later).\nYou will each anonymously mark one other person’s work.\nWe will provide a marking rubric.\n\n\nFirst practical test:\n\nDate: 13 February, 9–11 AM.\nFormat:\n\nIn-class test, I believe open-book but no internet.\nWill center on writing R code and interpreting results.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "day1.html",
    "href": "day1.html",
    "title": "Day One: Projects in R",
    "section": "",
    "text": "What Will We Cover by the End of Day One?",
    "crumbs": [
      "Day One: Projects in R"
    ]
  },
  {
    "objectID": "day1.html#what-will-we-cover-by-the-end-of-day-one",
    "href": "day1.html#what-will-we-cover-by-the-end-of-day-one",
    "title": "Day One: Projects in R",
    "section": "",
    "text": "Setting up R and RStudio.\nWorking with vectors, matrices, and data frames.\nDiscussing how to structure projects and organize files.\nInstalling Git, setting up a GitHub account, creating a local Git repository, and connecting it to RStudio.\nLearning Quarto and Markdown to write reports.",
    "crumbs": [
      "Day One: Projects in R"
    ]
  },
  {
    "objectID": "day1.html#what-is-the-outcome-for-today",
    "href": "day1.html#what-is-the-outcome-for-today",
    "title": "Day One: Projects in R",
    "section": "What is the outcome for today?",
    "text": "What is the outcome for today?\nAnswer the questions in Practical One, and place the answers into its own qmd file into a Quarto project on GitHub.\nNow, let’s get started.",
    "crumbs": [
      "Day One: Projects in R"
    ]
  },
  {
    "objectID": "r.html",
    "href": "r.html",
    "title": "1  Fundamental R Objects and Functions",
    "section": "",
    "text": "1.1 Getting Help\nSee the video r.mp4 for a visual explanation of this document.\nR is a powerful statistical computing language designed for efficient data analysis. It is free, open-source, and operates primarily on objects, which makes it flexible for data manipulation.\nR can be downloaded from CRAN, and RStudio, the recommended integrated development environment (IDE), can be obtained from RStudio. Once installed, open RStudio to explore its interface.\nTo view the help documentation for a function, use either the ? operator or the help() function:",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#getting-help",
    "href": "r.html#getting-help",
    "title": "1  Fundamental R Objects and Functions",
    "section": "",
    "text": "?setwd     # Opens help for setwd()\nhelp(\"lm\")  # Alternative way to get help for lm()",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#libraries",
    "href": "r.html#libraries",
    "title": "1  Fundamental R Objects and Functions",
    "section": "1.2 Libraries",
    "text": "1.2 Libraries\nLibraries in R provide additional functions and features. For example:\n\nSyntax: library(packageName)\nExample:\nlibrary(ggplot2)  # Loads the ggplot2 package for data visualization",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#reading-in-data",
    "href": "r.html#reading-in-data",
    "title": "1  Fundamental R Objects and Functions",
    "section": "1.3 Reading in Data",
    "text": "1.3 Reading in Data\nThere are many ways to read data into R. For example, to read data from a CSV file:\ndata &lt;- read.csv(\"data/yourfile.csv\")\nOther packages such as readr, readxl, and openxlsx offer additional methods and options for reading various data formats.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#assigning-values-to-objects",
    "href": "r.html#assigning-values-to-objects",
    "title": "1  Fundamental R Objects and Functions",
    "section": "1.4 Assigning Values to Objects",
    "text": "1.4 Assigning Values to Objects\nIn R, you assign values to objects using &lt;- (preferred) or =:\nx &lt;- 1               # Assigns the value 1 to x\nmsg &lt;- \"Hello, world!\"  # Assigns a character string to msg\nprint(x)            # Prints the value of x\nTo check an object’s type, use the class() function:\nclass(x)   # Returns \"numeric\"\nclass(msg) # Returns \"character\"",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#basic-computations",
    "href": "r.html#basic-computations",
    "title": "1  Fundamental R Objects and Functions",
    "section": "1.5 Basic Computations",
    "text": "1.5 Basic Computations\nR supports basic arithmetic following standard mathematical precedence:\n2 + 3 * 5      # Multiplication happens before addition\nlog(10)        # Natural logarithm of 10\n4^2            # Exponentiation: 4 squared\nsqrt(16)       # Square root of 16\nabs(-7)        # Absolute value of -7\nFor integer division and modulus operations:\n15 %/% 4  # Integer division: returns 3\n15 %% 4   # Modulus: returns 3",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#working-with-vectors",
    "href": "r.html#working-with-vectors",
    "title": "1  Fundamental R Objects and Functions",
    "section": "1.6 Working with Vectors",
    "text": "1.6 Working with Vectors\nVectors store multiple values of the same type and are a fundamental data structure in R:\nx &lt;- c(1, 3, 2, 10, 5)  # Creates a numeric vector\ny &lt;- 1:5                # Creates a sequence from 1 to 5\nMathematical operations can be applied directly to vectors:\ny + 2   # Adds 2 to each element\n2 * y   # Multiplies each element by 2\nx + y   # Adds corresponding elements of x and y\nx * y   # Multiplies corresponding elements of x and y\nx^y     # Raises each element of x to the power given in y\nTo extract specific elements from a vector:\nx[2]      # Returns the second element\nx[3:5]    # Returns elements from index 3 to 5\nx[-2]     # Returns all elements except the second one\nx[x &gt; 3]  # Returns elements greater than 3",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#working-with-character-vectors",
    "href": "r.html#working-with-character-vectors",
    "title": "1  Fundamental R Objects and Functions",
    "section": "1.7 Working with Character Vectors",
    "text": "1.7 Working with Character Vectors\nCharacter vectors store text data:\ncolours &lt;- c(\"green\", \"blue\", \"orange\", \"yellow\", \"red\")\ncolours[2]  # Returns \"blue\"\ncolours[5]  # Returns \"red\"\nNote that character vectors do not support arithmetic operations.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#matrices",
    "href": "r.html#matrices",
    "title": "1  Fundamental R Objects and Functions",
    "section": "1.8 Matrices",
    "text": "1.8 Matrices\nMatrices are two-dimensional arrays where all elements are of the same type:\nx &lt;- c(1, 3, 2, 10, 5)\ny &lt;- 1:5\n\nm1 &lt;- cbind(x, y)  # Column-binding creates a matrix\nm2 &lt;- rbind(x, y)  # Row-binding creates a matrix\nMatrix operations include:\nt(m1)       # Transposes the matrix\nm1 + m2     # Adds corresponding elements\nm1 %*% m2   # Matrix multiplication\nsolve(m1)   # Computes the inverse of a square matrix (if possible)",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#lists",
    "href": "r.html#lists",
    "title": "1  Fundamental R Objects and Functions",
    "section": "1.9 Lists",
    "text": "1.9 Lists\nLists can store elements of different types, making them flexible for various data:\nmy_list &lt;- list(num = 1, vec = c(1, 2, 3), mat = matrix(1:6, nrow = 2))\nAccess elements of a list using the $ operator:\nmy_list$num  # Retrieves the numeric element\nmy_list$vec  # Retrieves the vector\nmy_list$mat  # Retrieves the matrix",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#data-frames",
    "href": "r.html#data-frames",
    "title": "1  Fundamental R Objects and Functions",
    "section": "1.10 Data Frames",
    "text": "1.10 Data Frames\nData frames store tabular data, similar to spreadsheets:\ndf &lt;- data.frame(name = c(\"Alice\", \"Bob\"), age = c(25, 30))\nExtract data from a data frame:\ndf$name           # Extracts the \"name\" column\ndf[1, ]           # Returns the first row\ndf[df$age &gt; 25, ] # Filters rows where age is greater than 25",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#working-with-file-paths",
    "href": "r.html#working-with-file-paths",
    "title": "1  Fundamental R Objects and Functions",
    "section": "1.11 Working with File Paths",
    "text": "1.11 Working with File Paths\nR provides several functions to work with file paths, allowing you to build, explore, and manipulate directories and files in a platform-independent way. Here are some common functions along with examples and explanations:\n\n1.11.1 Constructing File Paths with file.path()\n\nPurpose:\nfile.path() constructs file paths by combining directory and file names. It automatically uses the correct file separator for the operating system.\nExample:\n# Combine folder, subfolder, and file name\nfull_path &lt;- file.path(\"data\", \"raw\", \"myfile.txt\")\nprint(full_path)\nThis will produce a path like \"data/raw/myfile.txt\" on Unix-like systems or \"data\\\\raw\\\\myfile.txt\" on Windows.\n\n\n\n1.11.2 Listing Files with list.files()\n\nPurpose:\nlist.files() returns a character vector of the file names in a specified directory. It can also be used to filter files by pattern.\nExample:\n# List all files in the \"data\" directory\nfiles &lt;- list.files(path = \"data\")\nprint(files)\n\n# List only CSV files in the \"data\" directory\ncsv_files &lt;- list.files(path = \"data\", pattern = \"\\\\.csv$\")\nprint(csv_files)\nThis function is useful for dynamically accessing the contents of a directory.\n\n\n1.11.2.1 Listing Directories with list.dirs()\n\nPurpose:\nlist.dirs() provides a recursive list of directories (subdirectories included) within a specified path.\nExample:\n# List all directories within the \"data\" folder, including subdirectories\ndirectories &lt;- list.dirs(path = \"data\")\nprint(directories)\nThis function helps you understand the structure of your file system under a particular directory.\n\n\n\n1.11.2.2 Creating Directories with dir.create()\n\nPurpose:\ndir.create() is used to create new directories. When creating nested directories (sub-directories that do not yet exist), you must set the recursive argument to TRUE.\nExample:\n# Create a nested directory structure \"data/raw\"\ndir.create(path = file.path(\"data\", \"raw\"), recursive = TRUE)\nSetting recursive = TRUE ensures that if the parent directory \"data\" does not exist, it will be created along with \"raw\".\n\n\n\n1.11.2.3 Reading and Writing Text Files with readLines() and writeLines()\n\nreadLines():\n\nPurpose:\nReads text files line by line into a character vector, which is useful for processing or analyzing text.\nExample:\n# Read the content of a text file into a vector of lines\nlines &lt;- readLines(\"data/raw/myfile.txt\")\nprint(lines)\n\nwriteLines():\n\nPurpose:\nWrites a character vector to a text file, with each element being written as a separate line.\nExample:\n# Create a vector of text lines\noutput_lines &lt;- c(\"This is the first line.\", \"This is the second line.\")\n\n# Write the vector to a file called \"output.txt\"\nwriteLines(output_lines, con = \"data/output/output.txt\")\nThese functions are ideal for simple text processing, such as reading logs, configuration files, or exporting simple reports.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#writing-functions",
    "href": "r.html#writing-functions",
    "title": "1  Fundamental R Objects and Functions",
    "section": "1.12 Writing Functions",
    "text": "1.12 Writing Functions\nFunctions in R allow you to encapsulate operations and reuse code. Define a function using function():\nincrement &lt;- function(x) {\n  x + 1  # Adds 1 to the input value and returns it\n}\n\nincrement(3)  # Returns 4\nNote that functions always return the last value computed:\nincrement &lt;- function(x) {\n  x + 2\n  x + 1\n}\n\nincrement(3)  # Returns 4\nFunctions can also take multiple arguments:\nadd_numbers &lt;- function(x, y) {\n  return(x + y)\n}\n\nadd_numbers(2, 5)  # Returns 7\nA common example is a function to calculate the hypotenuse of a right triangle (you will use this daily):\nhypotenuse &lt;- function(a, b) {\n  sqrt(a^2 + b^2)  # Uses the Pythagorean theorem\n}\n\nhypotenuse(3, 4)  # Returns 5",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "r.html#basic-statistical-functions",
    "href": "r.html#basic-statistical-functions",
    "title": "1  Fundamental R Objects and Functions",
    "section": "1.13 Basic Statistical Functions",
    "text": "1.13 Basic Statistical Functions\nR includes built-in functions for summary statistics:\nmean(df$age)     # Computes the mean\nsd(df$age)       # Computes the standard deviation\nsummary(df)      # Provides a summary of the data frame\nTo create frequency tables:\ntable(df$name)  # Counts occurrences of each name",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamental R Objects and Functions</span>"
    ]
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "2  Tackling Projects in RStudio",
    "section": "",
    "text": "2.1 Using RStudio Projects\nRefer to the video projects.mp4 for an overview of working on projects. Here are some principles for keeping your work organized and reproducible.\nBenefits:",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tackling Projects in RStudio</span>"
    ]
  },
  {
    "objectID": "projects.html#using-rstudio-projects",
    "href": "projects.html#using-rstudio-projects",
    "title": "2  Tackling Projects in RStudio",
    "section": "",
    "text": "Click on New Project in the top-right corner of RStudio to create an RStudio Project.\nThis creates a directory containing all the code, data, and outputs for your analysis.\nWhen you open a project, the working directory is automatically set to that project folder.\n\n\n\nConsistent relative paths: Avoids issues with absolute paths that vary across devices.\nEasier collaboration: Consistent paths make sharing scripts seamless.\nQuick access: Recently opened projects are available in the top-right dropdown menu.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tackling Projects in RStudio</span>"
    ]
  },
  {
    "objectID": "projects.html#organizing-project-files-and-directories",
    "href": "projects.html#organizing-project-files-and-directories",
    "title": "2  Tackling Projects in RStudio",
    "section": "2.2 Organizing Project Files and Directories",
    "text": "2.2 Organizing Project Files and Directories\nA well-structured project prevents clutter and helps you locate files easily. A common folder structure might include:\n\n\n\n\n\n\n\nFolder Name\nPurpose\n\n\n\n\n_raw_data/\nStores unmodified datasets\n\n\n_output/\nContains figures, reports, and final documents\n\n\n_tmp/\nHolds intermediate files not intended for sharing\n\n\n_reference/\nKeeps supplementary materials such as papers and assignment details\n\n\n\nNote: Keep scripts (e.g., .R, .Rmd, .qmd) in the main project directory to avoid issues with relative paths.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tackling Projects in RStudio</span>"
    ]
  },
  {
    "objectID": "projects.html#structuring-r-scripts-for-readability",
    "href": "projects.html#structuring-r-scripts-for-readability",
    "title": "2  Tackling Projects in RStudio",
    "section": "2.3 Structuring R Scripts for Readability",
    "text": "2.3 Structuring R Scripts for Readability\nGood script structure improves maintainability and reduces errors. Consider these guidelines:\n\nOrganize Scripts Logically\n\nBegin with a setup section (load libraries and data).\nFollow with analysis and processing steps, grouped logically.\n\nImprove Readability\n\nKeep lines at a reasonable length (even with word wrapping).\nUse informative variable names instead of generic ones like x or y.\nAvoid reusing variable names to prevent confusion.\n\nUse Section Headings\n\nSeparate your code into sections with comment dividers (e.g., # ---- Setup ----).\nRStudio recognizes these dividers and allows for code folding.\n\n\nExample of a Structured Script:\n# ============================\n# Setup\n# ============================\nlibrary(ggplot2)              # Load required packages\ndata_raw &lt;- read.csv(\"_raw_data/air_pollution.csv\")  # Load dataset\n\n# ============================\n# Data Cleaning\n# ============================\ndata_cleaned &lt;- data_raw |&gt;\n  dplyr::filter(!is.na(pm2.5)) |&gt;\n  dplyr::mutate(log_pm = log(pm2.5))\n\n# ============================\n# Visualization\n# ============================\nggplot(data_cleaned, aes(x = temperature, y = log_pm)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n# ============================\n# Model Fitting\n# ============================\nmodel &lt;- lm(log_pm ~ temperature + humidity, data = data_cleaned)",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tackling Projects in RStudio</span>"
    ]
  },
  {
    "objectID": "projects.html#summary-of-best-practices",
    "href": "projects.html#summary-of-best-practices",
    "title": "2  Tackling Projects in RStudio",
    "section": "2.4 Summary of Best Practices",
    "text": "2.4 Summary of Best Practices\n\nUse RStudio Projects for consistent working directories and collaboration.\nOrganize files into clearly named directories to avoid clutter.\nStructure your R scripts with a logical order, clear variable names, and well-defined sections.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tackling Projects in RStudio</span>"
    ]
  },
  {
    "objectID": "quarto.html",
    "href": "quarto.html",
    "title": "3  Literate Programming",
    "section": "",
    "text": "3.1 What is Literate Programming?\nSee the video quarto.mp4 for a visual explanation of this document.\nLIterate programming combines code (e.g., R or Python) with text to create documents that are both readable and executable. The text itself is written in Markdown, a lightweight formatting language that allows us to structure documents with headings, bullet points, bold and italic text, and more.\nTwo key tools for literate programming in R are R Markdown and Quarto.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#what-is-r-markdown",
    "href": "quarto.html#what-is-r-markdown",
    "title": "3  Literate Programming",
    "section": "4.1 What is R Markdown?",
    "text": "4.1 What is R Markdown?\nR Markdown was the original tool for embedding code within documents. It allows users to write reports, create presentations, and generate formatted documents that include both text and code outputs.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#structure-of-an-r-markdown-file",
    "href": "quarto.html#structure-of-an-r-markdown-file",
    "title": "3  Literate Programming",
    "section": "4.2 Structure of an R Markdown File",
    "text": "4.2 Structure of an R Markdown File\nAn R Markdown file (.Rmd) consists of three main components:\n\n4.2.1 1. YAML Front Matter\nThe YAML front matter is the metadata at the top of the document. It controls the output format (e.g., HTML, PDF, Word).\nExample:\n---\ntitle: \"My Report\"\noutput: html_document\n---\nThis tells R Markdown to generate an HTML document. Other options include pdf_document and word_document.\n\n\n4.2.2 2. Code Chunks\nCode chunks are sections of executable code, enclosed by triple backticks (```) with a specified language. In our case, it will be R:\n\n\nsummary(cars)\n\n\n\nBackticks (`) are usually found next to the number 1 key on the keyboard.\nBy default, all code in chunks is executed when the document is rendered.\n\nChunk Options:\n- echo = FALSE → Hides the code but still runs it.\n- echo = TRUE → Displays both the code and its output.\n- Other options can control figure size, message display, and more.\nExample:\n\n\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\n\nThe summary will appear in the final document, but the code itself won’t be displayed.\n\n\n4.2.3 3. Markdown Formatting\nMarkdown is used for structuring text.\n\nHeadings: Use # for headings (## for subheadings, ### for deeper levels).\n\nBullet points: Use - or *.\n\nNumbered lists: Use 1., 2., etc.\n\nBold text: **bold** → bold\n\nItalic text: *italic* → italic",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#output",
    "href": "quarto.html#output",
    "title": "3  Literate Programming",
    "section": "4.3 Output",
    "text": "4.3 Output\nR Markdown can embed plots, tables, and formatted text into a document. When you include code that generates a plot, the plot will be displayed in the final output.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#what-is-quarto",
    "href": "quarto.html#what-is-quarto",
    "title": "3  Literate Programming",
    "section": "5.1 What is Quarto?",
    "text": "5.1 What is Quarto?\nQuarto is the successor to R Markdown. It is very similar but:\n- Has a different YAML front matter structure.\n- Supports more programming languages (via Jupyter).\n- Provides a more unified workflow for reports, websites, and books.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#differences-in-yaml",
    "href": "quarto.html#differences-in-yaml",
    "title": "3  Literate Programming",
    "section": "5.2 Differences in YAML",
    "text": "5.2 Differences in YAML\nInstead of specifying output: html_document like in R Markdown, Quarto uses:\n---\ntitle: \"My Report\"\nformat: html\n---\nQuarto uses format instead of output, making it more flexible.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#code-chunks-in-quarto",
    "href": "quarto.html#code-chunks-in-quarto",
    "title": "3  Literate Programming",
    "section": "5.3 Code Chunks in Quarto",
    "text": "5.3 Code Chunks in Quarto\nQuarto code chunks function similarly to R Markdown, but chunk options can be specified in a cleaner way:\n\n```{r}\n#| eval: false\nsummary(cars)\n```\n\nUsing #| option: value inside the chunk makes options easier to read and manage.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#why-use-quarto-projects",
    "href": "quarto.html#why-use-quarto-projects",
    "title": "3  Literate Programming",
    "section": "6.1 Why Use Quarto Projects?",
    "text": "6.1 Why Use Quarto Projects?\nOne limitation of R Markdown was that while you could generate individual reports (.html, .pdf, etc.), managing multiple files in a project (e.g., a website) required extra tools like bookdown.\nQuarto solves this by providing built-in support for project structures.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#starting-a-quarto-project",
    "href": "quarto.html#starting-a-quarto-project",
    "title": "3  Literate Programming",
    "section": "6.2 Starting a Quarto Project",
    "text": "6.2 Starting a Quarto Project\n\n6.2.1 Via RStudio GUI\nUnfortunately, in RStudio one cannot start a Quart project via the New File menu. Instead, you have to start a new RStudio project entirely. The change is that you must select Quarto Project from the New Project menu.\n\n\n6.2.2 By adding a quarto.yml file\nAlternatively, what you can do is simply add a _quarto.yml file. Here is an example _quarto.yml file:\nproject:\n  type: book\n  render:\n  - index.qmd\n  output-dir: docs\nbook:\n  title: Statistical Computing\n  sidebar:\n    border: true\n    background: light\n    position: right\n  navbar:\n    search: true\n    background: light\n  chapters:\n  - index.qmd\nformat:\n  html:\n    theme: cosmo\n    toc: true\n    toc-depth: 3\n    toc-location: left\nA brief explanation of this file:\n\nindex.qmd is the “base” qmd. It is the first file that will be rendered. Always include it.\n\nIf you want to include other files, then specify them in the chapters and render keys.\n\noutput-dir specifies where the output will be saved. In this case, it will be saved in a docs folder.\nbook specifies the title of the book, the sidebar, the navbar, and the chapters.\nformat specifies specific formatting options for the html outputL\n\nThe theme defines the overall appearance of the website.\ntoc specifies whether a table of contents should be generated, and the toc-depth specifies how many levels of headings should be included.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#defining-a-quarto-project",
    "href": "quarto.html#defining-a-quarto-project",
    "title": "3  Literate Programming",
    "section": "6.3 Defining a Quarto Project",
    "text": "6.3 Defining a Quarto Project\nA Quarto project is defined by a quarto.yml file, which specifies how multiple .qmd files should be compiled together.\nExample of a quarto.yml file for a website:\nproject:\n  type: website\n\nformat:\n  html:\n    toc: true\n    toc-depth: 3\nThis tells Quarto:\n- The project is a website. .\n- A table of contents should be generated (toc: true) for headings up to level 3 (toc-depth: 3).",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#website-vs.-book",
    "href": "quarto.html#website-vs.-book",
    "title": "3  Literate Programming",
    "section": "6.4 Website vs. Book",
    "text": "6.4 Website vs. Book\n\nWebsite (type: website)\n\nOnly outputs HTML.\n\nHas a navigation bar linking different pages.\n\n\nBook (type: book)\n\nCan output HTML, PDF, or Word.\n\nUses a chapters: key to define sections.\n\n\nExample quarto.yml for a book:\nproject:\n  type: book\n\nbook:\n  chapters:\n    - index.qmd\n    - intro.qmd\n    - analysis.qmd\n\nformat:\n  pdf: \n    documentclass: book\nHere:\n- The chapters define the book structure.\n- The format section customizes the outputs.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#rendering-a-quarto-project",
    "href": "quarto.html#rendering-a-quarto-project",
    "title": "3  Literate Programming",
    "section": "6.5 Rendering a Quarto Project",
    "text": "6.5 Rendering a Quarto Project\nTo build the entire project, use the quarto R package:\ninstall.packages(\"quarto\")\nquarto::quarto_render()\n\nThis renders all files in the project according to quarto.yml.\n\nFor websites, output is saved in _site/.\n\nFor books, output is saved in _book/.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "quarto.html#important-notes",
    "href": "quarto.html#important-notes",
    "title": "3  Literate Programming",
    "section": "6.6 Important Notes",
    "text": "6.6 Important Notes\n\nTo start a new Quarto project, go to RStudio → New Project → Quarto Project.\n\nIf creating a website, ensure you have an index.qmd file—websites require an index.html as the main entry point.\nClicking the Knit button in RStudio will render the current .qmd file, but quarto::quarto_render() is needed for the entire project.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Literate Programming</span>"
    ]
  },
  {
    "objectID": "git.html",
    "href": "git.html",
    "title": "4  Git and GitHub",
    "section": "",
    "text": "4.1 Prerequites",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "git.html#prerequites",
    "href": "git.html#prerequites",
    "title": "4  Git and GitHub",
    "section": "",
    "text": "Create a GitHub account: GitHub.\nInstall Git: Git.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "git.html#setting-up-git-and-github",
    "href": "git.html#setting-up-git-and-github",
    "title": "4  Git and GitHub",
    "section": "4.2 Setting Up Git and GitHub",
    "text": "4.2 Setting Up Git and GitHub\nThere are two main approaches for setting up a new R project that you want on GitHub:\n\nApproach 1: Create project using Git, then download it to your machine\nApproach 2: Begin with pre-existing RStudio project, and then connect to GitHub\n\nThe first approach tends to be easier (and is new to these notes).\n\n4.2.1 Approach 1: Create project using Git, then download it to your machine\nWithin here, there are two approaches. One of them uses GitHub Desktop, a standalone program, and the other uses github.com itself, the website.\nWe suggest using GitHub Desktop, as it will make managing your Git repositories easier after setup.\n\n4.2.1.1 Use GitHub Desktop\nGitHub Desktop is a standalone program for working with Git and GitHub. It is very beginner-friendly.\nHere is a video describing how to use it: https://www.youtube.com/watch?v=8Dd7KRpKeaE\nI have not watched it myself, but apparently it makes it very easy. Note that it contains more information than you need, so you can stop when you are set up.\n\n\n4.2.1.2 Use GitHub\nYou can also create a new repo directly on GitHub, and then clone it (Git-speak for download it). Here are the instructions: New project, GitHub first.\n\n\n\n4.2.2 Approach 2: Begin with RStudio project on your machine, and then connect it to GitHub\nSee the video git.mp4 for this process illustrated.\nIn RStudio, open your project.\nThen, run the following code.\n\n4.2.2.1 Install usethis\nFirstly, ensure usethis is installed:\nif (!requireNamespace(\"usethis\", quietly = TRUE)) {\n  install.packages(\"usethis\")\n}\n\n\n4.2.2.2 Introduce yourself to Git\nThen, if you have not set Git up before, you’ll need to run the following. Note that by “not set up Git”, I do not mean whether you’ve installed Git, but rather whether you’ve given Git basic authorship information. If you’re not sure, you can run the following:\ngert::git_config_global()\nI am not exactly sure what it looks like if you’ve not set up Git authorship information, but the key thing is that it will not have a row where the first column is user.name and the second column is your name, and a row where the first column is user.email and the second column is your email address.\nIf you can see you’ve not set user.name and user.email, then run the following, swopping NULL with your name and email address:\n# set your username and your email address\nusername &lt;- NULL  # replace NULL with e.g. \"Miguel Rodo\" (be sure to include the quotes)\nemail &lt;- NULL # replace NULL with e.g. \"miguel.rodo@uct.ac.za\"\nstopifnot(!is.null(username)) # just checking you set this\nstopifnot(!is.null(email))\ngert::git_config_global_set(\"user.name\",  username)\ngert::git_config_global_set(\"user.email\", email)\n\n\n4.2.2.3 Initialise Git for the project\nFinally, you are ready to initialise git for that project:\nusethis::use_git()\nWhen it asks you whether you want to commit the extra files, say yes. Be aware that you don’t type “Absolutely” or “Definitely” or whatever corresponds to “yes”, you just type the number that corresponds to yes.\nAfter running the above, to get the Git pane to appear in the top right corner (alongside Environment and History), you need to close and re-open RStudio.\nYou will not need to install usethis and set Git authorship information for each project, but you will need to initialise Git for each project.\n\n\n4.2.2.4 Connect Git to GitHub\nRun the following code:\nusethis::create_github_token()\nName the token, set the expiry date and click on Create. Then copy the token (it looks like ghp_akerjlwk4j5qlk45j).\nThen, run the following code:\ngitcreds::gitcreds_set()\nand paste your token.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "git.html#further-resources",
    "href": "git.html#further-resources",
    "title": "4  Git and GitHub",
    "section": "4.3 Further resources",
    "text": "4.3 Further resources\n\nHappy Git with R:\n\nSet up guidance:\n\nWhy Git? Why GitHub?\nRegister a GitHub account\nInstall Git\nIntroduce Yourself to Git\nPersonal Access tokens for HTTPS\n\nDescription of how Git works and how to use it:\n\nSome Git Basics, and then the next few sections",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "projrsimple.html",
    "href": "projrsimple.html",
    "title": "5  projrsimple",
    "section": "",
    "text": "5.1 Installation\nI’ve written a simple package to help you:\nThere are only two functions in this package:\nWhat problems does it help solve?\nYou can install the package from GitHub using the following code:",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>`projrsimple`</span>"
    ]
  },
  {
    "objectID": "projrsimple.html#installation",
    "href": "projrsimple.html#installation",
    "title": "5  projrsimple",
    "section": "",
    "text": "if (!requireNamespace(\"remotes\", quietly = TRUE)) {\n  install.packages(\"remotes\")\n}\nremotes::install_github(\"MiguelRodo/projrsimple\")",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>`projrsimple`</span>"
    ]
  },
  {
    "objectID": "projrsimple.html#usage",
    "href": "projrsimple.html#usage",
    "title": "5  projrsimple",
    "section": "5.2 Usage",
    "text": "5.2 Usage\n\nInstall projrsimple (see above).\nOpen an R session in your project directory (folder where you want to work).\nRun projr_init() to initialise your project (set up Git, GitHub, project directories and a README; simpler than the other instructions for doing this).\nWrite code in scripts (.R, .Rmd, .qmd and/or Quarto projects) in the project directory.\nRun projr_run to execute all scripts. Within those scripts, save outputs to _output directory.\nView rendered documents in the docs directory.\n\nSee the package website for more information: projrsimple.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>`projrsimple`</span>"
    ]
  },
  {
    "objectID": "prac1.html",
    "href": "prac1.html",
    "title": "6  Practical One",
    "section": "",
    "text": "NOTE: the answers to the questions below should be placed into their own qmd file in a Quarto project on GitHub. This Quarto project (the rendered document itself, as well as the source code on GitHub) will be peer-assessed next week.\n\nFind all rows in “airquality” that have missing values. Note that the airquality dataset in R is always available (just type airquality in the console to see it).\nFind mean, sd, min, max for each of temperature and ozone level.\nFor linear regression, parameter estimates can be found as follows. \\(\\hat{\\beta} = (X^TX)^{-1}X^TY\\) Here, Y is the response variable, and X is the design matrix. The cars data (an R data set, also always available in R) contains two variables: speed and distance to stop. Fit a simple linear regression model to these data, i.e. find the \\(\\beta\\) estimates, using the equation above, and matrix calcuations in R.\nCheck that you get the same \\(\\beta\\) estimates as when fitting the linear regression model using lm() in R.",
    "crumbs": [
      "Day One: Projects in R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Practical One</span>"
    ]
  },
  {
    "objectID": "tidyverse.html",
    "href": "tidyverse.html",
    "title": "7  Working with dataframes",
    "section": "",
    "text": "7.1 Motivation\nFor an accompanying video, see tidyverse.mp4.\nWhile base R is powerful, its syntax can be verbose and inconsistent for everyday data manipulation. The tidyverse offers a suite of packages that work seamlessly together, providing a coherent and intuitive framework for your workflow.\nInstead of installing individual packages like dplyr or tidyr separately, the tidyverse metapackage installs the core packages and recommended dependencies all at once:\nKey Advantages:\nAt the heart of many analyses is the dataframe, and the tidyverse is built to simplify working with and transforming dataframes effectively.",
    "crumbs": [
      "Day Five: Transforming data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with dataframes</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#motivation",
    "href": "tidyverse.html#motivation",
    "title": "7  Working with dataframes",
    "section": "",
    "text": "if (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nlibrary(tidyverse)\n\n\nReadable Syntax: Tidyverse functions replace cumbersome expressions (e.g., test_df[test_df[[\"column\"]] == \"value\", ]) with cleaner, more intuitive code.\nPipe-Friendly: Designed with the data object as the first argument, these functions work seamlessly with the pipe operator for streamlined chaining.\nConsistent Interfaces: Uniform parameter names and positions across functions reduce confusion and help prevent errors.\nPredictable Behavior: Standardized return types and design make outcomes more reliable and debugging easier.",
    "crumbs": [
      "Day Five: Transforming data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with dataframes</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#displaying-dataframes-in-r",
    "href": "tidyverse.html#displaying-dataframes-in-r",
    "title": "7  Working with dataframes",
    "section": "7.2 Displaying Dataframes in R",
    "text": "7.2 Displaying Dataframes in R\nWorking with large dataframes can be challenging if you inadvertently print all rows to the console. Consider the following example:\n\nexample_df &lt;- data.frame(\n  id = rep(paste0(\"id_\", 1:500), each = 20),\n  timepoint = rep(1:20, 500),\n  disease_status = rep(\n    sample(c(\"healthy\", \"diseased\"), 20, replace = TRUE),\n    each = 500\n  ),\n  blood_pressure = c(\n    runif(20, 120, 140) |&gt; round(),\n    sample(c(NA, runif(19, 120, 140)), 9980, replace = TRUE)\n  )\n)\n# Introduce a typo for demonstration\nexample_df[50, \"disease_status\"] &lt;- \"Healthy\"\n\nThis dataframe contains 10,000 rows:\n\nnrow(example_df)\n\n[1] 10000\n\n\nPrinting the entire dataframe (e.g., simply typing example_df) would display all rows, which is both inconvenient and time-consuming. Instead, we typically use the head() function to preview just the first few rows:\n\nhead(example_df)\n\n    id timepoint disease_status blood_pressure\n1 id_1         1        healthy            138\n2 id_1         2        healthy            136\n3 id_1         3        healthy            131\n4 id_1         4        healthy            131\n5 id_1         5        healthy            138\n6 id_1         6        healthy            130\n\n\nHowever, constantly having to call head() is not ideal. A better solution is to convert the dataframe into a tibble.\n\n7.2.1 Enhancing Dataframe Display with tibble\nThe tibble package (a core part of the tidyverse) offers a more concise and informative display. When you print a tibble, it only shows the first 10 rows and includes data type information for each column. This is particularly useful because it lets you quickly verify, for example, whether timepoint is numeric or character—information that can be obscured in the default dataframe printout.\n\n7.2.1.1 Installation and Conversion\nFirst, ensure that the tibble package is installed and loaded:\n\nif (!requireNamespace(\"tibble\", quietly = TRUE)) {\n  install.packages(\"tibble\")\n}\nlibrary(tibble)\n\nConvert your dataframe to a tibble using as_tibble():\n\n# Check the class before conversion\nclass(example_df)\n\n[1] \"data.frame\"\n\n# Convert to tibble\nexample_df &lt;- as_tibble(example_df)\n\n# Check the class after conversion\nclass(example_df)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nNow, simply typing example_df will display a neat summary of your data:\n\nexample_df\n\n# A tibble: 10,000 × 4\n   id    timepoint disease_status blood_pressure\n   &lt;chr&gt;     &lt;int&gt; &lt;chr&gt;                   &lt;dbl&gt;\n 1 id_1          1 healthy                   138\n 2 id_1          2 healthy                   136\n 3 id_1          3 healthy                   131\n 4 id_1          4 healthy                   131\n 5 id_1          5 healthy                   138\n 6 id_1          6 healthy                   130\n 7 id_1          7 healthy                   129\n 8 id_1          8 healthy                   135\n 9 id_1          9 healthy                   136\n10 id_1         10 healthy                   132\n# ℹ 9,990 more rows\n\n\nThis tidy display helps you catch issues like typos or unexpected data types early on. I generally load both tibble and ggplot2 at the top of my scripts, and you can also create new dataframes directly as tibbles:\n\nnew_tbl &lt;- tibble(x = 1:5, y = rnorm(5))\nnew_tbl\n\n# A tibble: 5 × 2\n      x      y\n  &lt;int&gt;  &lt;dbl&gt;\n1     1  0.100\n2     2  1.11 \n3     3  1.28 \n4     4  0.748\n5     5 -1.30 \n\n\nNote that for a tibble object (i.e. a dataframe that has class tbl_df) to display as a tibble, the tibble package needs to be attached. So always add library(tibble) to the top of your script.\nA final, very nice feature of tibbles is that selecting one column using df[, \"column\"] will return a tibble, rather than a vector. This is typically what we would expect:\n\nexample_df[, \"id\"]\n\n# A tibble: 10,000 × 1\n   id   \n   &lt;chr&gt;\n 1 id_1 \n 2 id_1 \n 3 id_1 \n 4 id_1 \n 5 id_1 \n 6 id_1 \n 7 id_1 \n 8 id_1 \n 9 id_1 \n10 id_1 \n# ℹ 9,990 more rows\n\n\n\nclass(example_df[, \"id\"])\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\n\n7.2.2 Exploring Data Columns with view_cols\nWhilst tibbles provide a more informative display, they still only show the first few rows of each column.\nAnother useful tool is the view_cols function from the UtilsDataRSV package. This function displays unique entries for each column—always showing any missing values (NAs)—so you can quickly identify anomalies such as typos or unexpected values.\nTo install the UtilsDataRSV package, use the following code:\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n  install.packages(\"remotes\")\n}\nremotes::install_github(\"SATVILab/UtilsDataRSV\")\n\nOnce installed, you can apply view_cols to your tibble to inspect the unique values in each column:\n\nUtilsDataRSV::view_cols(example_df)\n\n[1] \"id\"\n [1] \"id_355\" \"id_60\"  \"id_120\" \"id_462\" \"id_101\" \"id_482\" \"id_159\" \"id_393\"\n [9] \"id_368\" \"id_161\" \"id_476\" \"id_236\" \"id_249\" \"id_376\" \"id_59\"  \"id_57\" \n[17] \"id_6\"   \"id_41\"  \"id_453\" \"id_13\" \n[1] \"480 unique entries not displayed\"\n[1] \"_____________________\"\n[1] \"timepoint\"\n[1]  8  9  1 19  3\n[1] \"_____________________\"\n[1] \"disease_status\"\n[1] \"Healthy\"  \"healthy\"  \"diseased\"\n[1] \"_____________________\"\n[1] \"blood_pressure\"\n[1] 126.7409 135.8335 131.9028 136.0000       NA\n[1] \"_____________________\"\n\n\nWarning: Not all unique entries displayed for these non-numeric cols: id\n\n\nview_cols is particularly helpful when you cannot easily inspect all the rows or columns of a dataframe. For example, with 10,000 rows, it’s impractical to scroll through the entire dataset to:\n\nIdentify Typos: In our example, the first ten rows may not reveal that disease_status contains three unique entries (e.g., \"healthy\", \"diseased\", and the typo \"Healthy\").\nDetect Missing Data: It’s easy to overlook missing values (NAs).\nVerify Expected Values: For instance, the id column should have 500 unique entries, and view_cols can help you confirm th\n\nFor a possibly more polished alternative, consider exploring the skimr package, which (I think) offers similar functionality.\nYou can also display the dataframe on its side, using dplyr::glimpse():\n\ndplyr::glimpse(example_df)\n\nRows: 10,000\nColumns: 4\n$ id             &lt;chr&gt; \"id_1\", \"id_1\", \"id_1\", \"id_1\", \"id_1\", \"id_1\", \"id_1\",…\n$ timepoint      &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, …\n$ disease_status &lt;chr&gt; \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", …\n$ blood_pressure &lt;dbl&gt; 138.0000, 136.0000, 131.0000, 131.0000, 138.0000, 130.0…",
    "crumbs": [
      "Day Five: Transforming data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with dataframes</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#pipe",
    "href": "tidyverse.html#pipe",
    "title": "7  Working with dataframes",
    "section": "7.3 Pipe",
    "text": "7.3 Pipe\n\nEssentially, the pipe is a rewrite of code, from\n\nf(x,y)\nto\nx |&gt; f(y)\nIn other words, the object to the left of the pipe (x) becomes the first argument to the function on the right (f) and y becomes its second parameter.\nAs as silly example, this:\n\ntest_vec &lt;- 1:5\nmean(test_vec[test_vec &gt; 3], trim = 0.5)\n\n[1] 4.5\n\n\nis equivalent to this:\n\ntest_vec[test_vec &gt; 3] |&gt;\n  mean(trim = 0.5)\n\n[1] 4.5\n\n\nIn terms of f(x,y), f is mean, x is test_vec[test_vec &gt; 3] and y is trim = 0.5.\nThe above examples are simply, and there is no great advantage to the pipe operator.\nHowever, when you have chained operations, the pipe operator can make the code more readable. For a realistic example, see R4DS on the pipe, where they show a dramatic gain in readability from using the pipe. To run their example, you will need to have the flights dataset from the nycflights13 package and the tidyverse package attached.\nTo ensure this, first run the chunk below before running their example:\n\npkg_vec &lt;- c(\"tidyverse\", \"nycflights13\", \"tibble\")\nfor (x in pkg_vec) {\n  if (!requireNamespace(x, quietly = TRUE)) {\n    install.packages(x)\n  }\n}\nlibrary(nycflights13)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ purrr     1.0.2\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tibble)\ndata(flights, package = \"nycflights13\")\n\nTheir example involves many functions that we’ll discuss in the rest of this chapter.",
    "crumbs": [
      "Day Five: Transforming data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with dataframes</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#working-with-rows-and-columns",
    "href": "tidyverse.html#working-with-rows-and-columns",
    "title": "7  Working with dataframes",
    "section": "7.4 Working with rows and columns",
    "text": "7.4 Working with rows and columns\nThe dplyr package provides a suite of functions for manipulating dataframes, including selecting rows and columns, creating new columns, and summarizing data.\nThere is little point in re-writing excellent content, so I refer you to the R4DS chapter on dplyr for a comprehensive introduction to the package.\n\n7.4.1 Summary\nHere is a concise summary of the content on the dplyr section of R4DS. For more examples, refer the excellent examples within each function’s help file (e.g. ?filter).\nTo run the examples below, you will need to attach the nycflights13 package and the tidyverse package (or just the dplyr package).\n\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\nlibrary(dplyr)\ndata(flights, package = \"nycflights13\")\nflights\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n7.4.1.1 Rows\nThe rows functions select rows (filter), order rows (arrange), and select distinct rows (distinct).\n\nfilter(): Keeps rows that meet specified conditions.\n\nflights |&gt; filter(month == 1)\n\n# A tibble: 27,004 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 26,994 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\narrange(): Reorders rows based on column values.\n\nflights |&gt; arrange(dep_delay)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013    12     7     2040           2123       -43       40           2352\n 2  2013     2     3     2022           2055       -33     2240           2338\n 3  2013    11    10     1408           1440       -32     1549           1559\n 4  2013     1    11     1900           1930       -30     2233           2243\n 5  2013     1    29     1703           1730       -27     1947           1957\n 6  2013     8     9      729            755       -26     1002            955\n 7  2013    10    23     1907           1932       -25     2143           2143\n 8  2013     3    30     2030           2055       -25     2213           2250\n 9  2013     3     2     1431           1455       -24     1601           1631\n10  2013     5     5      934            958       -24     1225           1309\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\ndistinct(): Returns unique rows or unique combinations of specified columns.\n\nflights |&gt; distinct(origin, dest)\n\n# A tibble: 224 × 2\n   origin dest \n   &lt;chr&gt;  &lt;chr&gt;\n 1 EWR    IAH  \n 2 LGA    IAH  \n 3 JFK    MIA  \n 4 JFK    BQN  \n 5 LGA    ATL  \n 6 EWR    ORD  \n 7 EWR    FLL  \n 8 LGA    IAD  \n 9 JFK    MCO  \n10 LGA    ORD  \n# ℹ 214 more rows\n\n\n\n\n\n7.4.1.2 Columns\nThe columns functions create new columns (mutate), select columns (select), rename columns (rename), and relocate columns (relocate).\n\nselect(): Chooses and reorders specific columns.\n\nflights |&gt; select(year, month, day, dep_delay)\n\n# A tibble: 336,776 × 4\n    year month   day dep_delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;\n 1  2013     1     1         2\n 2  2013     1     1         4\n 3  2013     1     1         2\n 4  2013     1     1        -1\n 5  2013     1     1        -6\n 6  2013     1     1        -4\n 7  2013     1     1        -5\n 8  2013     1     1        -3\n 9  2013     1     1        -3\n10  2013     1     1        -2\n# ℹ 336,766 more rows\n\n\n\nSelecting a range:\n\nflights |&gt; select(year:day)\n\n# A tibble: 336,776 × 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ℹ 336,766 more rows\n\n\nSelecting all columns except some:\n\nflights |&gt; select(!year:arr_delay)\n\n# A tibble: 336,776 × 10\n   carrier flight tailnum origin dest  air_time distance  hour minute\n   &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n 1 UA        1545 N14228  EWR    IAH        227     1400     5     15\n 2 UA        1714 N24211  LGA    IAH        227     1416     5     29\n 3 AA        1141 N619AA  JFK    MIA        160     1089     5     40\n 4 B6         725 N804JB  JFK    BQN        183     1576     5     45\n 5 DL         461 N668DN  LGA    ATL        116      762     6      0\n 6 UA        1696 N39463  EWR    ORD        150      719     5     58\n 7 B6         507 N516JB  EWR    FLL        158     1065     6      0\n 8 EV        5708 N829AS  LGA    IAD         53      229     6      0\n 9 B6          79 N593JB  JFK    MCO        140      944     6      0\n10 AA         301 N3ALAA  LGA    ORD        138      733     6      0\n# ℹ 336,766 more rows\n# ℹ 1 more variable: time_hour &lt;dttm&gt;\n\n\n\nmutate(): Creates new columns derived from existing ones.\n\nflights |&gt;\n  mutate(speed = distance / air_time * 60) |&gt;\n  select(distance, air_time, speed)\n\n# A tibble: 336,776 × 3\n   distance air_time speed\n      &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;\n 1     1400      227  370.\n 2     1416      227  374.\n 3     1089      160  408.\n 4     1576      183  517.\n 5      762      116  394.\n 6      719      150  288.\n 7     1065      158  404.\n 8      229       53  259.\n 9      944      140  405.\n10      733      138  319.\n# ℹ 336,766 more rows\n\n\nrename(): Changes column names without removing other columns.\n\nflights |&gt; rename(YEAR = year)\n\n# A tibble: 336,776 × 19\n    YEAR month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nrelocate(): Moves columns to a new position within the data frame.\n\nflights |&gt; relocate(carrier, flight)\n\n# A tibble: 336,776 × 19\n   carrier flight  year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;chr&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 UA        1545  2013     1     1      517            515         2      830\n 2 UA        1714  2013     1     1      533            529         4      850\n 3 AA        1141  2013     1     1      542            540         2      923\n 4 B6         725  2013     1     1      544            545        -1     1004\n 5 DL         461  2013     1     1      554            600        -6      812\n 6 UA        1696  2013     1     1      554            558        -4      740\n 7 B6         507  2013     1     1      555            600        -5      913\n 8 EV        5708  2013     1     1      557            600        -3      709\n 9 B6          79  2013     1     1      557            600        -3      838\n10 AA         301  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 10 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, tailnum &lt;chr&gt;,\n#   origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,\n#   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nMoving the columns before a specified column:\n\nflights |&gt; relocate(carrier, flight, .before = year)\n\n# A tibble: 336,776 × 19\n   carrier flight  year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;chr&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 UA        1545  2013     1     1      517            515         2      830\n 2 UA        1714  2013     1     1      533            529         4      850\n 3 AA        1141  2013     1     1      542            540         2      923\n 4 B6         725  2013     1     1      544            545        -1     1004\n 5 DL         461  2013     1     1      554            600        -6      812\n 6 UA        1696  2013     1     1      554            558        -4      740\n 7 B6         507  2013     1     1      555            600        -5      913\n 8 EV        5708  2013     1     1      557            600        -3      709\n 9 B6          79  2013     1     1      557            600        -3      838\n10 AA         301  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 10 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, tailnum &lt;chr&gt;,\n#   origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,\n#   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\n\n7.4.1.3 Groups & Summaries\nThe groups and summaries functions group data (group_by) and summarise data within groups (summarise).\n\ngroup_by(): Splits the data into groups based on one or more columns. The grouping is not visible, and does not create multiple dataframes. See summarise below for how to use the groups.\n\nflights |&gt; group_by(month)\n\n# A tibble: 336,776 × 19\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nsummarise(): Computes summary statistics for each group.\n\nflights |&gt; group_by(month) |&gt; summarise(avg_delay = mean(dep_delay, na.rm = TRUE))\n\n# A tibble: 12 × 2\n   month avg_delay\n   &lt;int&gt;     &lt;dbl&gt;\n 1     1     10.0 \n 2     2     10.8 \n 3     3     13.2 \n 4     4     13.9 \n 5     5     13.0 \n 6     6     20.8 \n 7     7     21.7 \n 8     8     12.6 \n 9     9      6.72\n10    10      6.24\n11    11      5.44\n12    12     16.6",
    "crumbs": [
      "Day Five: Transforming data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with dataframes</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#changing-the-shape-of-data",
    "href": "tidyverse.html#changing-the-shape-of-data",
    "title": "7  Working with dataframes",
    "section": "7.5 Changing the shape of data",
    "text": "7.5 Changing the shape of data\nA key concept in data analysis is that of “tidy data”. A dataset is tidy when:\n\nEach variable is in its own column.\nEach observation is in its own row.\nEach cell contains a single value.\n\nConsistent data structure simplifies analysis, leverages vectorized operations, and makes it easier to use tidyverse functions.\nThe tidyr package provides convenient tools for tidying data, such as pivot_longer() and pivot_wider().\nAs before, I refer you to the R4DS chapter on tidyr for a comprehensive introduction to the package.\n\n7.5.1 Summary\nHere is a concise summary of the key content on the tidyr section of R4DS. For more examples, refer the excellent examples within each function’s help file (e.g. ?pivot_longer).\nTo run the examples below, you will need to attach the tidyr package and load the billboard and cms_patient_experience datasets.\n\nif (!requireNamespace(\"tidyr\", quietly = TRUE)) {\n  install.packages(\"tidyr\")\n}\nlibrary(tidyr)\ndata(billboard, package = \"tidyr\")\ndata(cms_patient_experience, package = \"tidyr\")\n\n\npivot_longer():\nConverts data from wide to long format by gathering multiple columns into key-value pairs (results in fewer columns, more rows).\nHere is the billboard data before the transformation:\n\nbillboard\n\n# A tibble: 317 × 79\n   artist     track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n   &lt;chr&gt;      &lt;chr&gt; &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 2 Pac      Baby… 2000-02-26      87    82    72    77    87    94    99    NA\n 2 2Ge+her    The … 2000-09-02      91    87    92    NA    NA    NA    NA    NA\n 3 3 Doors D… Kryp… 2000-04-08      81    70    68    67    66    57    54    53\n 4 3 Doors D… Loser 2000-10-21      76    76    72    69    67    65    55    59\n 5 504 Boyz   Wobb… 2000-04-15      57    34    25    17    17    31    36    49\n 6 98^0       Give… 2000-08-19      51    39    34    26    26    19     2     2\n 7 A*Teens    Danc… 2000-07-08      97    97    96    95   100    NA    NA    NA\n 8 Aaliyah    I Do… 2000-01-29      84    62    51    41    38    35    35    38\n 9 Aaliyah    Try … 2000-03-18      59    53    38    28    21    18    16    14\n10 Adams, Yo… Open… 2000-08-26      76    76    74    69    68    67    61    58\n# ℹ 307 more rows\n# ℹ 68 more variables: wk9 &lt;dbl&gt;, wk10 &lt;dbl&gt;, wk11 &lt;dbl&gt;, wk12 &lt;dbl&gt;,\n#   wk13 &lt;dbl&gt;, wk14 &lt;dbl&gt;, wk15 &lt;dbl&gt;, wk16 &lt;dbl&gt;, wk17 &lt;dbl&gt;, wk18 &lt;dbl&gt;,\n#   wk19 &lt;dbl&gt;, wk20 &lt;dbl&gt;, wk21 &lt;dbl&gt;, wk22 &lt;dbl&gt;, wk23 &lt;dbl&gt;, wk24 &lt;dbl&gt;,\n#   wk25 &lt;dbl&gt;, wk26 &lt;dbl&gt;, wk27 &lt;dbl&gt;, wk28 &lt;dbl&gt;, wk29 &lt;dbl&gt;, wk30 &lt;dbl&gt;,\n#   wk31 &lt;dbl&gt;, wk32 &lt;dbl&gt;, wk33 &lt;dbl&gt;, wk34 &lt;dbl&gt;, wk35 &lt;dbl&gt;, wk36 &lt;dbl&gt;,\n#   wk37 &lt;dbl&gt;, wk38 &lt;dbl&gt;, wk39 &lt;dbl&gt;, wk40 &lt;dbl&gt;, wk41 &lt;dbl&gt;, wk42 &lt;dbl&gt;, …\n\n\nHere is the billboard data after the transformation:\n\nbillboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), # columns to pivot (display along rows)\n    names_to = \"week\",  # new column for the column names\n    values_to = \"rank\", # new column for the values\n    values_drop_na = TRUE # drop rows with NA values\n  )\n\n# A tibble: 5,307 × 5\n   artist  track                   date.entered week   rank\n   &lt;chr&gt;   &lt;chr&gt;                   &lt;date&gt;       &lt;chr&gt; &lt;dbl&gt;\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02   wk1      91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02   wk2      87\n10 2Ge+her The Hardest Part Of ... 2000-09-02   wk3      92\n# ℹ 5,297 more rows\n\n\npivot_wider():\nTransforms long data to wide format by spreading key-value pairs across columns (results in more columns, fewer rows).\nHere is the cms_patient_experience data before the transformation:\n\ncms_patient_experience\n\n# A tibble: 500 × 5\n   org_pac_id org_nm                           measure_cd measure_title prf_rate\n   &lt;chr&gt;      &lt;chr&gt;                            &lt;chr&gt;      &lt;chr&gt;            &lt;dbl&gt;\n 1 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       63\n 2 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       87\n 3 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       86\n 4 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       57\n 5 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       85\n 6 0446157747 USC CARE MEDICAL GROUP INC       CAHPS_GRP… CAHPS for MI…       24\n 7 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       59\n 8 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       85\n 9 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       83\n10 0446162697 ASSOCIATION OF UNIVERSITY PHYSI… CAHPS_GRP… CAHPS for MI…       63\n# ℹ 490 more rows\n\n\nHere is the cms_patient_experience data after the transformation:\n\ncms_patient_experience |&gt; \n  pivot_wider(\n    id_cols = c(\"org_pac_id\", \"org_nm\"), # columns to keep as identifiers\n    names_from = measure_cd, # column to spread (unique entries become columns)\n    values_from = prf_rate # column to use for values (values become cell contents)\n  )\n\n# A tibble: 95 × 8\n   org_pac_id org_nm CAHPS_GRP_1 CAHPS_GRP_2 CAHPS_GRP_3 CAHPS_GRP_5 CAHPS_GRP_8\n   &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 0446157747 USC C…          63          87          86          57          85\n 2 0446162697 ASSOC…          59          85          83          63          88\n 3 0547164295 BEAVE…          49          NA          75          44          73\n 4 0749333730 CAPE …          67          84          85          65          82\n 5 0840104360 ALLIA…          66          87          87          64          87\n 6 0840109864 REX H…          73          87          84          67          91\n 7 0840513552 SCL H…          58          83          76          58          78\n 8 0941545784 GRITM…          46          86          81          54          NA\n 9 1052612785 COMMU…          65          84          80          58          87\n10 1254237779 OUR L…          61          NA          NA          65          NA\n# ℹ 85 more rows\n# ℹ 1 more variable: CAHPS_GRP_12 &lt;dbl&gt;\n\n\n\nColumns not specified in id_cols, names_from, or values_from are dropped (such as measure_nm in this example).",
    "crumbs": [
      "Day Five: Transforming data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with dataframes</span>"
    ]
  },
  {
    "objectID": "ggplot2.html",
    "href": "ggplot2.html",
    "title": "8  ggplot2",
    "section": "",
    "text": "NOTE: THIS IS A DRAFT",
    "crumbs": [
      "Day Five: Transforming data",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>`ggplot2`</span>"
    ]
  }
]