# Fundamental `R` objects and functions

R is a powerful statistical computing language widely used for data analysis. It is free, open-source, and designed for working with data efficiently. Unlike some other programming languages, R operates primarily on objects, making it highly flexible for data manipulation.

R can be downloaded from [CRAN](http://cran.r-project.org/), and RStudio, an integrated development environment (IDE) for R, can be installed from [RStudio](http://www.rstudio.com/). Once installed, open RStudio and explore its interface. 

To get help on a function in R, use the `?` operator or `help()`.
  
```r
?setwd  # Opens help documentation for setwd()
help("lm")  # Alternative way to get help
```

---

### Libraries

- Provide additional functions
- Syntax
- Examples

### Reading in data

- Give examples (package, from a csv file)
- Many other ways (maybe add a details section, on the `readr`, `readxl` and `openxlsx` packages)

### Assigning Values to Objects in R

In R, you assign values to objects using `<-` (preferred) or `=`. 

  
```r
x <- 1  # Assigns the value 1 to x
msg <- "Hello, world!"  # Assigns a character string to msg
print(x)  # Prints the value of x
```

You can check the type of an object using `class()`.

  
```r
class(x)  # Returns "numeric"
class(msg)  # Returns "character"
```

---

### Basic Computations

R supports basic arithmetic operations, following standard mathematical precedence.

  
```r
2 + 3 * 5  # Multiplication happens before addition
log(10)  # Computes the natural logarithm
4^2  # Exponentiation: 4 squared
sqrt(16)  # Computes the square root
abs(-7)  # Computes the absolute value
```

For integer division and modulus (remainder) operations:

  
```r
15 %/% 4  # Integer division: returns 3
15 %% 4  # Modulus: returns the remainder 3
```

---

### Working with Vectors

Vectors store multiple values of the same type. They are one of the most important data structures in R.

  
```r
x <- c(1, 3, 2, 10, 5)  # Creates a numeric vector
y <- 1:5  # Creates a sequence from 1 to 5
```

You can perform mathematical operations directly on vectors.

  
```r
y + 2  # Adds 2 to each element
2 * y  # Multiplies each element by 2
x + y  # Adds corresponding elements of x and y
x * y  # Multiplies corresponding elements of x and y
x^y  # Raises each element of x to the corresponding power in y
```

Extracting specific elements from a vector:

  
```r
x[2]  # Returns the second element
x[3:5]  # Returns elements from index 3 to 5
x[-2]  # Returns all elements except the second one
x[x > 3]  # Returns elements greater than 3
```

---

### Working with Character Vectors

Character vectors store text data.

  
```r
colours <- c("green", "blue", "orange", "yellow", "red")  # Creates a character vector
colours[2]  # Returns "blue"
colours[5]  # Returns "red"
```

Unlike numeric vectors, character vectors do not support arithmetic operations.

---

### Matrices in R

Matrices are two-dimensional arrays where all elements are of the same type.

  
```r
x <- c(1, 3, 2, 10, 5)
y <- 1:5

m1 <- cbind(x, y)  # Creates a matrix by column-binding
m2 <- rbind(x, y)  # Creates a matrix by row-binding
```

You can perform mathematical operations on matrices.

  
```r
t(m1)  # Transposes the matrix
m1 + m2  # Adds corresponding elements
m1 %*% m2  # Matrix multiplication
solve(m1)  # Computes the inverse of a square matrix (if possible)
```

---

### Lists in R

Lists are flexible structures that can store elements of different types.

  
```r
my_list <- list(num = 1, vec = c(1, 2, 3), mat = matrix(1:6, nrow=2))
```

Accessing elements of a list:

```r
my_list$num  # Retrieves the numeric element
my_list$vec  # Retrieves the vector
my_list$mat  # Retrieves the matrix
```

---

### Data Frames in R

Data frames store tabular data, similar to spreadsheets.

  
```r
df <- data.frame(name = c("Alice", "Bob"), age = c(25, 30))  # Creates a data frame
```

Extracting data from a data frame:

  
```r
df$name  # Extracts the "name" column
df[1, ]  # Returns the first row
df[df$age > 25, ]  # Filters rows where age is greater than 25
```

---

### Working with file paths

- `file.path()`
- `list.files()`
- `list.dirs()`
- `dir.create()`
- Getting your home directory.
  - Always have a look at the `here` package.
  - `here::here()`d

### Writing Functions in R

Functions allow you to perform operations and reuse code. A function in R is defined using `function()`.

  
```r
increment <- function(x) {  
  return(x + 1)  # Adds 1 to the input value and returns it
}

increment(3)  # Returns 4
```

Functions can also take multiple arguments.

  
```r
add_numbers <- function(x, y) {  
  return(x + y)  # Adds two numbers and returns the result
}

add_numbers(2, 5)  # Returns 7
```

Another common example is a function to calculate the hypotenuse of a right triangle.

  
```r
hypotenuse <- function(a, b) {  
  return(sqrt(a^2 + b^2))  # Uses the Pythagorean theorem
}

hypotenuse(3, 4)  # Returns 5
```

---

### Basic Statistical Functions

R provides built-in functions for summary statistics.

  
```r
mean(df$age)  # Computes the mean
sd(df$age)  # Computes the standard deviation
summary(df)  # Provides summary statistics
```

To create frequency tables:

  
```r
table(df$name)  # Counts occurrences of each name
```

---

### Practical Exercises

Find missing values in the `airquality` dataset:

  
```r
missing_values <- is.na(airquality)
which(rowSums(missing_values) > 0)  # Returns rows with missing values
```

Compute the mean and standard deviation of Ozone levels:

  
```r
mean(airquality$Ozone, na.rm = TRUE)  # Removes NAs before computing mean
sd(airquality$Ozone, na.rm = TRUE)  # Standard deviation of Ozone
```

Perform a simple linear regression using matrix calculations:

  
```r
data(cars)
X <- cbind(1, cars$speed)  # Creates the design matrix
Y <- matrix(cars$dist)  # Response variable

betas <- solve(t(X) %*% X) %*% t(X) %*% Y  # Computes regression coefficients
betas
```

Compare the result with R's built-in `lm()` function:

  
```r
model <- lm(dist ~ speed, data = cars)
summary(model)
```


