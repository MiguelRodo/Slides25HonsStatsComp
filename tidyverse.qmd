# Making working with `R` objects easier {#sec-day5-tidyverse}

**NOTE: THIS IS A DRAFT**

## Displaying Dataframes in R

Working with large dataframes can be challenging if you inadvertently print all rows to the console.
Consider the following example:

```{r}
example_df <- data.frame(
  id = rep(paste0("id_", 1:500), each = 20),
  timepoint = rep(1:20, 500),
  disease_status = rep(
    sample(c("healthy", "diseased"), 20, replace = TRUE),
    each = 500
  ),
  blood_pressure = c(
    runif(20, 120, 140) |> round(),
    sample(c(NA, runif(19, 120, 140)), 9980, replace = TRUE)
  )
)
# Introduce a typo for demonstration
example_df[50, "disease_status"] <- "Healthy"
```

This dataframe contains 10,000 rows:

```{r}
nrow(example_df)
```

Printing the entire dataframe (e.g., simply typing `example_df`) would display all rows, which is both inconvenient and time-consuming. Instead, we typically use the `head()` function to preview just the first few rows:

```{r}
head(example_df)
```

However, constantly having to call `head()` is not ideal. A better solution is to convert the dataframe into a tibble.

---

### Enhancing Dataframe Display with `tibble`

The `tibble` package (a core part of the tidyverse) offers a more concise and informative display. When you print a tibble, it only shows the first 10 rows and includes data type information for each column. This is particularly useful because it lets you quickly verify, for example, whether `timepoint` is numeric or character—information that can be obscured in the default dataframe printout.

#### Installation and Conversion

First, ensure that the `tibble` package is installed and loaded:

```{r}
if (!requireNamespace("tibble", quietly = TRUE)) {
  install.packages("tibble")
}
library(tibble)
```

Convert your dataframe to a tibble using `as_tibble()`:

```{r}
# Check the class before conversion
class(example_df)

# Convert to tibble
example_df <- as_tibble(example_df)

# Check the class after conversion
class(example_df)
```

Now, simply typing `example_df` will display a neat summary of your data:

```{r}
example_df
```

This tidy display helps you catch issues like typos or unexpected data types early on. I generally load both `tibble` and `ggplot2` at the top of my scripts, and you can also create new dataframes directly as tibbles:

```{r}
new_tbl <- tibble(x = 1:5, y = rnorm(5))
new_tbl
```

Note that for a `tibble` object (i.e. a dataframe that has class `tbl_df`) to display as a tibble, the `tibble` package needs to be attached.
So always add `library(tibble)` to the top of your script.

A final, very nice feature of `tibbles` is that selecting one column using `df[, "column"]` will return a tibble, rather than a vector.
This is typically what we would expect:

```{r}
example_df[, "id"]
```

```{r}
class(example_df[, "id"])
```

---

### Exploring Data Columns with `view_cols`

Another useful tool is the `view_cols` function from the `UtilsDataRSV` package. This function displays unique entries for each column—always showing any missing values (NAs)—so you can quickly identify anomalies such as typos or unexpected values.

#### When and Why to Use `view_cols`

- **Identify Typos:** In our example, the first ten rows may not reveal that `disease_status` contains three unique entries (e.g., `"healthy"`, `"diseased"`, and the typo `"Healthy"`).
- **Detect Missing Data:** With 10,000 rows, it’s easy to overlook missing values (NAs) when only a few rows are displayed.
- **Verify Expected Values:** For instance, the `id` column should have 500 unique entries, and `view_cols` can help you confirm this.

#### Installation

To install the `UtilsDataRSV` package, use the following code:

```r
if (!requireNamespace("remotes", quietly = TRUE)) {
  install.packages("remotes")
}
remotes::install_github("SATVILab/UtilsDataRSV")
```

#### Using `view_cols`

Once installed, you can apply `view_cols` to your tibble to inspect the unique values in each column:

```{r}
UtilsDataRSV::view_cols(example_df)
```

This command will:

- Display up to 20 unique values per column (noting if more exist).
- Clearly show all NA entries.
- Provide a quick summary of each column’s contents, which is especially helpful after data processing steps to ensure no new issues have been introduced.

For a possibly more polished alternative, consider exploring the `skimr` package, which offers similar functionality.

You can also display the dataframe on its side, using `dplyr::glimpse()`:

```{r}
dplyr::glimpse(example_df)
```

## Pipe

- Essentially, the pipe is a rewrite of code, from

```r
f(x,y)
```

to 

```r
x |> f(y)
```

In other words, the object to the left of the pipe (`x`) becomes the first argument to the function on the right (`f`) and `y` becomes its second parameter.

As as silly example, this:

```{r}
test_vec <- 1:5
mean(test_vec[test_vec > 3], trim = 0.5)
```

is equivalent to this:

```{r}
test_vec[test_vec > 3] |>
  mean(trim = 0.5)
```

In terms of `f(x,y)`, `f` is `mean`, `x` is `test_vec[test_vec > 3]` and `y` is `trim = 0.5`.

The above examples are simply, and there is no great advantage to the pipe operator.

However, when you have chained operations, the pipe operator can make the code more readable.
For a realistic example, see [R4DS on the pipe](https://r4ds.hadley.nz/data-transform.html#sec-the-pipe), where they show a dramatic gain in readability from using the pipe.
To run their example, you will need to have the `flights` dataset from the `nycflights13` package and the `tidyverse` package attached.

To ensure this, first run the chunk below before running their example:

```{r}
pkg_vec <- c("tidyverse", "nycflights13", "tibble")
for (x in pkg_vec) {
  if (!requireNamespace(x, quietly = TRUE)) {
    install.packages(x)
  }
}
library(nycflights13)
library(tidyverse)
library(tibble)
data(flights, package = "nycflights13")
```

Their example involves many functions that we'll discuss in the rest of this chapter.

## Motivating the `tidyverse`

Base R (`R` without any extra packages, e.g. `example_df[1, 1]`) is powerful but can be verbose and inconsistent for everyday data manipulation.
The `tidyverse` is a suite of `R` packages that work together to offer a coherent, intuitive framework that simplifies your workflow.

Individual `tidyverse` packages (such a `dplyr` and `tidyr`) can be installed separately, but the `tidyverse` metapackage installs the core packages and recommended dependencies in one go:

```{r}
if (!requireNamespace("tidyverse", quietly = TRUE)) {
  install.packages("tidyverse")
}
library(tidyverse)
```

### Key Advantages:

- **Readable Syntax:** Tidyverse functions replace cumbersome expressions (e.g., `test_df[test_df[["column"]] == "value", ]`) with cleaner code.
- **Pipe-Friendly:** Designed with the data object as the first argument, they integrate seamlessly with the pipe operator for streamlined chaining.
- **Consistent Function Interfaces:** Parameter names and positions are uniform across related functions, reducing confusion and the risk of errors, and making remembering t he functions easier.
- **Predictable Behavior:** Consistent return types and standardized design help avoid unexpected bugs.

<!--
Packages to cover:
- filter
- dplyr
- magrittr
- ggplot2
- tidyr
- pipes
- Notable mentions:
  - broom
  - tidymodels
  - forcats
  - lubridate
  - stringr
  - readr
  - purrr
  - tibble
  - rlang
  - stringi
  - readxl
  - haven
!-->

## `dplyr`

### Resources

See `dplyr.mp4` for a video on `dplyr`.

There is little point in re-writing excellent content, so I refer you to the [R4DS chapter on `dplyr`](https://r4ds.hadley.nz/transform.html) for a comprehensive introduction to the package.

### Summary

Here is a concise summary of the content on the `dplyr` section of R4DS.
For more examples, refer the excellent examples within each function's help file (e.g. `?filter`).

#### Rows

The rows functions select rows (`filter`), order rows (`arrange`), and select distinct rows (`distinct`).

- **filter()**: Keeps rows that meet specified conditions.

  ```{r}
  flights |> filter(month == 1)
  ```

- **arrange()**: Reorders rows based on column values.

  ```{r}
  flights |> arrange(dep_delay)
  ```

- **distinct()**: Returns unique rows or unique combinations of specified columns.

  ```{r}
  flights |> distinct(origin, dest)
  ```

#### Columns

The columns functions create new columns (`mutate`), select columns (`select`), rename columns (`rename`), and relocate columns (`relocate`).

- **select()**: Chooses and reorders specific columns.

  ```{r}
  flights |> select(year, month, day, dep_delay)
  ```

- **mutate()**: Creates new columns derived from existing ones.

  ```{r}
  flights |>
    mutate(speed = distance / air_time * 60) |>
    select(distance, air_time, speed)
  ```


- **rename()**: Changes column names without removing other columns.

  ```{r}
  flights |> rename(YEAR = year)
  ```

- **relocate()**: Moves columns to a new position within the data frame.

  ```{r}
  flights |> relocate(carrier, flight)
  ```

#### Groups & Summaries

The groups and summaries functions group data (`group_by`) and summarise data within groups (`summarise`).

- **group_by()**: Splits the data into groups based on one or more columns. The grouping is not visible, and does not create multiple dataframes. See `summarise` below for how to use the groups.

  ```{r}
  flights |> group_by(month)
  ```
  

- **summarise()**: Computes summary statistics for each group.

  ```{r}
  flights |> group_by(month) |> summarise(avg_delay = mean(dep_delay, na.rm = TRUE))
  ```

