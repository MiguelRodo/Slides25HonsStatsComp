# Making working with `R` objects easier {#sec-day5-tidyverse}


## Displaying Dataframes in R

Working with large dataframes can be challenging if you inadvertently print all rows to the console.
Consider the following example:

```{r}
example_df <- data.frame(
  id = rep(paste0("id_", 1:500), each = 20),
  timepoint = rep(1:20, 500),
  disease_status = rep(
    sample(c("healthy", "diseased"), 20, replace = TRUE),
    each = 500
  ),
  blood_pressure = c(
    runif(20, 120, 140) |> round(),
    sample(c(NA, runif(19, 120, 140)), 9980, replace = TRUE)
  )
)
# Introduce a typo for demonstration
example_df[50, "disease_status"] <- "Healthy"
```

This dataframe contains 10,000 rows:

```{r}
nrow(example_df)
```

Printing the entire dataframe (e.g., simply typing `example_df`) would display all rows, which is both inconvenient and time-consuming. Instead, we typically use the `head()` function to preview just the first few rows:

```{r}
head(example_df)
```

However, constantly having to call `head()` is not ideal. A better solution is to convert the dataframe into a tibble.

---

## Enhancing Dataframe Display with `tibble`

The `tibble` package (a core part of the tidyverse) offers a more concise and informative display. When you print a tibble, it only shows the first 10 rows and includes data type information for each column. This is particularly useful because it lets you quickly verify, for example, whether `timepoint` is numeric or character—information that can be obscured in the default dataframe printout.

### Installation and Conversion

First, ensure that the `tibble` package is installed and loaded:

```{r}
if (!requireNamespace("tibble", quietly = TRUE)) {
  install.packages("tibble")
}
library(tibble)
```

Convert your dataframe to a tibble using `as_tibble()`:

```{r}
# Check the class before conversion
class(example_df)

# Convert to tibble
example_df <- as_tibble(example_df)

# Check the class after conversion
class(example_df)
```

Now, simply typing `example_df` will display a neat summary of your data:

```{r}
example_df
```

This tidy display helps you catch issues like typos or unexpected data types early on. I generally load both `tibble` and `ggplot2` at the top of my scripts, and you can also create new dataframes directly as tibbles:

```{r}
new_tbl <- tibble(x = 1:5, y = rnorm(5))
new_tbl
```

Note that for a `tibble` object (i.e. a dataframe that has class `tbl_df`) to display as a tibble, the `tibble` package needs to be attached.
So always add `library(tibble)` to the top of your script.

---

## Exploring Data Columns with `view_cols`

Another useful tool is the `view_cols` function from the `UtilsDataRSV` package. This function displays unique entries for each column—always showing any missing values (NAs)—so you can quickly identify anomalies such as typos or unexpected values.

### When and Why to Use `view_cols`

- **Identify Typos:** In our example, the first ten rows may not reveal that `disease_status` contains three unique entries (e.g., `"healthy"`, `"diseased"`, and the typo `"Healthy"`).
- **Detect Missing Data:** With 10,000 rows, it’s easy to overlook missing values (NAs) when only a few rows are displayed.
- **Verify Expected Values:** For instance, the `id` column should have 500 unique entries, and `view_cols` can help you confirm this.

### Installation

To install the `UtilsDataRSV` package, use the following code:

```r
if (!requireNamespace("remotes", quietly = TRUE)) {
  install.packages("remotes")
}
remotes::install_github("SATVILab/UtilsDataRSV")
```

### Using `view_cols`

Once installed, you can apply `view_cols` to your tibble to inspect the unique values in each column:

```r
example_df |>
  UtilsDataRSV::view_cols()
```

This command will:

- Display up to 20 unique values per column (noting if more exist).
- Clearly show all NA entries.
- Provide a quick summary of each column’s contents, which is especially helpful after data processing steps to ensure no new issues have been introduced.

For a possibly more polished alternative, consider exploring the `skimr` package, which offers similar functionality.

## Pipe

- Essentially, the pipe is a rewrite of code, from

```r
f(x,y)
```

to 

```r
x |> f(y)
```

The two produce exactly the same results.
But the difference is that, when you have a bunch of things you need to do to an obejct (e.g. select certain rows from a dataframe, add new columns, etc.), the pipe makes it easier to read and write the code.

See [R4DS](https://r4ds.hadley.nz/data-transform.html#sec-the-pipe) on the pipe.

Problems with base `R` manipulations of things like data frames and lists and so on:

- Inconsistent syntax:
  - For example
- Not concise syntax
  - For example:
    - `test_df[test_df[["column"]] == "value", ]`
  - Regular expressions
    - `grepl("pattern", "string")`
- Does not necessarily work well with pipes
  - To work well with pipes, we want the first parameter to take the return value from the previous one
- Inconsistent return values
  - E.g. `test_df[, 1] vs test_df[, c(1, 2)]`

## `dplyr`

- `dplyr` provides key functions for working with data frames
- For example, `filter`

- 

- dplyr
- magrittr
- ggplot2
- tidyr
- pipes
- Notable mentions:
  - `broom`
  - `tidymodels`
  - `forcats`
  - `lubridate`
  - `stringr`
  - `readr`
  - `purrr`
  - `tibble`
  - `rlang`
  - `stringi`
  - `readxl`
  - `haven`